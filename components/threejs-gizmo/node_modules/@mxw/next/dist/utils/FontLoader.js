"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Font = exports.FontLoader = void 0;
const three_1 = require("@mxw/three");
class FontLoader extends three_1.Loader {
    constructor(manager) {
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new three_1.FileLoader(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function (text) {
            let json;
            try {
                json = JSON.parse(text);
            }
            catch (e) {
                console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');
                json = JSON.parse(text.substring(65, text.length - 2));
            }
            const font = scope.parse(json);
            if (onLoad)
                onLoad(font);
        }, onProgress, onError);
    }
    parse(json) {
        return new Font(json);
    }
}
exports.FontLoader = FontLoader;
//
class Font {
    constructor(data) {
        this.type = 'Font';
        this.data = data;
    }
    generateShapes(text, size = 100) {
        const shapes = [];
        const paths = createPaths(text, size, this.data);
        for (let p = 0, pl = paths.length; p < pl; p++) {
            Array.prototype.push.apply(shapes, paths[p].toShapes());
        }
        return shapes;
    }
}
exports.Font = Font;
function createPaths(text, size, data) {
    const chars = Array.from(text);
    const scale = size / data.resolution;
    const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;
    const paths = [];
    let offsetX = 0, offsetY = 0;
    for (let i = 0; i < chars.length; i++) {
        const char = chars[i];
        if (char === '\n') {
            offsetX = 0;
            offsetY -= line_height;
        }
        else {
            const ret = createPath(char, scale, offsetX, offsetY, data);
            offsetX += ret.offsetX;
            paths.push(ret.path);
        }
    }
    return paths;
}
function createPath(char, scale, offsetX, offsetY, data) {
    const glyph = data.glyphs[char] || data.glyphs['?'];
    if (!glyph) {
        console.error('THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + '.');
        return;
    }
    const path = new three_1.ShapePath();
    let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
    if (glyph.o) {
        const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));
        for (let i = 0, l = outline.length; i < l;) {
            const action = outline[i++];
            switch (action) {
                case 'm': // moveTo
                    x = outline[i++] * scale + offsetX;
                    y = outline[i++] * scale + offsetY;
                    path.moveTo(x, y);
                    break;
                case 'l': // lineTo
                    x = outline[i++] * scale + offsetX;
                    y = outline[i++] * scale + offsetY;
                    path.lineTo(x, y);
                    break;
                case 'q': // quadraticCurveTo
                    cpx = outline[i++] * scale + offsetX;
                    cpy = outline[i++] * scale + offsetY;
                    cpx1 = outline[i++] * scale + offsetX;
                    cpy1 = outline[i++] * scale + offsetY;
                    path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
                    break;
                case 'b': // bezierCurveTo
                    cpx = outline[i++] * scale + offsetX;
                    cpy = outline[i++] * scale + offsetY;
                    cpx1 = outline[i++] * scale + offsetX;
                    cpy1 = outline[i++] * scale + offsetY;
                    cpx2 = outline[i++] * scale + offsetX;
                    cpy2 = outline[i++] * scale + offsetY;
                    path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
                    break;
            }
        }
    }
    return { offsetX: glyph.ha * scale, path: path };
}
Font.prototype.isFont = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9udExvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9Gb250TG9hZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNDQUlvQjtBQUVwQixNQUFNLFVBQVcsU0FBUSxjQUFNO0lBRTlCLFlBQWEsT0FBTztRQUVuQixLQUFLLENBQUUsT0FBTyxDQUFFLENBQUM7SUFFbEIsQ0FBQztJQUVELElBQUksQ0FBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxPQUFPO1FBRXJDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQztRQUVuQixNQUFNLE1BQU0sR0FBRyxJQUFJLGtCQUFVLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUFDO1FBQzlDLE1BQU0sQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxJQUFJLENBQUMsYUFBYSxDQUFFLENBQUM7UUFDOUMsTUFBTSxDQUFDLGtCQUFrQixDQUFFLEtBQUssQ0FBQyxlQUFlLENBQUUsQ0FBQztRQUNuRCxNQUFNLENBQUMsSUFBSSxDQUFFLEdBQUcsRUFBRSxVQUFXLElBQUk7WUFFaEMsSUFBSSxJQUFJLENBQUM7WUFFVCxJQUFJO2dCQUVILElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksQ0FBRSxDQUFDO2FBRTFCO1lBQUMsT0FBUSxDQUFDLEVBQUc7Z0JBRWIsT0FBTyxDQUFDLElBQUksQ0FBRSx1RkFBdUYsQ0FBRSxDQUFDO2dCQUN4RyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUMsU0FBUyxDQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBRSxDQUFFLENBQUM7YUFFM0Q7WUFFRCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFFLElBQUksQ0FBRSxDQUFDO1lBRWpDLElBQUssTUFBTTtn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