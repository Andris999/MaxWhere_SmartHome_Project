import { Mesh, ShaderTypeNumber } from 'maxwhere';
import Transform from './Transform';
import * as THREE from '@mxw/three';
export default class MeshTransform extends Transform {
    mesh: Mesh;
    materialUniqueNess: boolean[];
    constructor(mesh: Mesh, forwardIdentity?: THREE.Vector3, upIdentity?: THREE.Vector3, rightIdentity?: THREE.Vector3);
    /**
     * Set material to transparent
     * @param transp
     * @param subvisualNumber
     * @param duration [milisec] changes back to the original state after duration elapsed, if not set, change is permanent
     * @returns
     */
    setTransparent(transp: boolean, subvisualNumber?: number, duration?: number): Promise<void>;
    /**
     * Set shader of material
     * @param shaderName
     * @param value
     * @param subvisualNumber
     * @param duration [milisec] changes back to the original state after duration elapsed, if not set, change is permanent
     */
    setShader(shaderName: ShaderTypeNumber, value: number, subvisualNumber?: number, duration?: number): Promise<void>;
    private getUniqueMaterial;
    /**
     * Sets material to transparent, and turns off raycast
     * @param ghost
     * @param subvisualNumber
     * @param duration [milisec] changes back to the original state after duration elapsed, if not set, change is permanent
     * @returns
     */
    setGhostMode(ghost: boolean, subvisualNumber?: number, duration?: number): void;
    private createUniqueMaterial;
}
