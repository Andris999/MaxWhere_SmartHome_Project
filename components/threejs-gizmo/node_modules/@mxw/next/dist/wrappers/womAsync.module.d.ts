import { Node, Webtable, Wom, WomCoreEventDescriptor, WomCommonEventDescriptor, WomCommonEventObject, WomInputTextEventDescriptor, WomInputTextEventObject, WomKeyboardEventObject, WomKeyboardEventDescriptor, WomDPIChangeChangedEventObject, WomDPIChangeEventDescriptor, WomResizeEventObject, WomResizeEventDescriptor, WomUnLoadingStateChangedEventObject, WomUnLoadingStateChangedEventDescriptor, WomLoadingStateChangedEventObject, WomLoadingStateChangedEventDescriptor, WomInsertedEventHandler, WomInsertedEventDescriptor, NodeMouseWheelEventObject, NodeMouseWheelEventDescriptor, NodeMouseEventObject, NodeMouseEventDesciptor } from 'maxwhere';
/**
 * Adds folder paths to collection of resource containing paths. It creates and initializes a new resource group and append paths to that group. Any resource used by wom elements should be available in one of resource folders at the time of element creation (e.g. mesh and physical obj files)
 * @param paths Resource folder paths to add. They can be relative path or absolute path. If given with a single String it will be converted to String[].
 * @param base Base folder for relative paths if paths are defined relatively. Not used otherwise.
 * @param  done Called after the resource group is initialized and populated successfully in maxwhere engine.
 * @returns  The random generated ID of the created resource group.
 */
declare function addResources(paths: string | Array<string>, base?: string, done?: Function): Promise<string>;
/**
 * Creates the specified Nodes and attaches them to this Node instance. Calls create() on every provided Node
 * @param {Node | Array<Node>} element Children to add to this Node instance
 * @returns {Promise}
 */
declare function render(element: Node | Webtable): Promise<any[]>;
/**
 * Log to the F6 dev console of maxwhere
 * @param {any} msg message to display
 * @returns {Promise}
 */
declare function log(msg: any): void;
/**
 * Registers an event listener. Handler function will be called every time when the specified event is fired in maxwhere engine or wom.
 * Self aware because auto removes itself when the defined object is closed/deleted
 * @param eventName Event type descriptor
 * @param handler  Handler function taking event as argument where event is an Object containing different properties according to the event type.
 * @param {Node|Wom} watching  object to watch when to remove listener from wom
 */
declare function selfAwareListener(eventName: NodeMouseEventDesciptor | 'strafeclick' | 'input-mouse', handler: (event: NodeMouseEventObject) => void, watching: Node | Wom): void;
declare function selfAwareListener(eventName: NodeMouseWheelEventDescriptor, handler: (event: NodeMouseWheelEventObject) => void, watching: Node | Wom): void;
declare function selfAwareListener(eventName: WomInsertedEventDescriptor, handler: WomInsertedEventHandler, watching: Node | Wom): void;
declare function selfAwareListener(eventName: WomLoadingStateChangedEventDescriptor, handler: (event: WomLoadingStateChangedEventObject) => void, watching: Node | Wom): void;
declare function selfAwareListener(eventName: WomUnLoadingStateChangedEventDescriptor, handler: (event: WomUnLoadingStateChangedEventObject) => void, watching: Node | Wom): void;
declare function selfAwareListener(eventName: WomResizeEventDescriptor, handler: (event: WomResizeEventObject) => void, watching: Node | Wom): void;
declare function selfAwareListener(eventName: WomDPIChangeEventDescriptor, handler: (event: WomDPIChangeChangedEventObject) => void, watching: Node | Wom): void;
declare function selfAwareListener(eventName: WomKeyboardEventDescriptor, handler: (event: WomKeyboardEventObject) => void, watching: Node | Wom): void;
declare function selfAwareListener(eventName: WomInputTextEventDescriptor, handler: (event: WomInputTextEventObject) => void, watching: Node | Wom): void;
declare function selfAwareListener(eventName: WomCommonEventDescriptor, handler: (event: WomCommonEventObject) => void, watching: Node | Wom): void;
declare function selfAwareListener(eventName: WomCoreEventDescriptor, handler: Function, watching: Node | Wom): void;
declare const _default: {
    render: typeof render;
    addResources: typeof addResources;
    log: typeof log;
    selfAwareListener: typeof selfAwareListener;
};
export default _default;
