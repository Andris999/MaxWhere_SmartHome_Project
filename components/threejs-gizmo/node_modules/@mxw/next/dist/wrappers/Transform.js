"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __importStar(require("@mxw/three"));
const maxwhere_1 = require("maxwhere");
const three_utils_1 = __importDefault(require("@mxw/three-utils"));
const lodash_1 = __importDefault(require("lodash"));
// Unity Transform class and Three.js Object3D inspired MaxWhere Transform class.
// Unity Transform: https://docs.unity3d.com/ScriptReference/Transform.html
// Three.js Object3D https://threejs.org/docs/#api/en/core/Object3D.matrix
class Transform {
    constructor(node, forwardIdentity, upIdentity, rightIdentity) {
        this.node = node;
        this.forwardIdentity =
            (forwardIdentity === null || forwardIdentity === void 0 ? void 0 : forwardIdentity.normalize()) || new THREE.Vector3(0, 0, 1);
        this.upIdentity = (upIdentity === null || upIdentity === void 0 ? void 0 : upIdentity.normalize()) || new THREE.Vector3(0, 1, 0);
        this.rightIdentity =
            (rightIdentity === null || rightIdentity === void 0 ? void 0 : rightIdentity.normalize()) || new THREE.Vector3(1, 0, 0);
    }
    /**
     * World position of object
     */
    get position() {
        return three_utils_1.default.V3ToThree(this.node.getPosition());
    }
    set position(value) {
        this.node.setPosition(three_utils_1.default.V3ToMw(value), 'absolute', 'world');
    }
    /**
     * Local position of object
     */
    get localPosition() {
        return three_utils_1.default.V3ToThree(this.node.getPosition({ local: true }));
    }
    set localPosition(value) {
        this.node.setPosition(three_utils_1.default.V3ToMw(value));
    }
    /**
     * World rotation in quaternion.
     */
    get rotation() {
        return three_utils_1.default.QuatToThree(this.node.getOrientation());
    }
    set rotation(value) {
        this.node.setOrientation(three_utils_1.default.QuatToMw(value.normalize()), 'absolute', 'world');
    }
    /**
     * Local rotation in quaternion
     */
    get localRotation() {
        return three_utils_1.default.QuatToThree(this.node.getOrientation({ local: true }));
    }
    set localRotation(value) {
        this.node.setOrientation(three_utils_1.default.QuatToMw(value.normalize()));
    }
    /**
     * World scale
     */
    get scale() {
        return three_utils_1.default.V3ToThree(this.node.getScale());
    }
    set scale(value) {
        this.node.setScale(three_utils_1.default.V3ToMw(value), 'absolute', 'world');
    }
    /**
     * Local scale
     */
    get localScale() {
        return three_utils_1.default.V3ToThree(this.node.getScale({ local: true }));
    }
    set localScale(value) {
        this.node.setScale(three_utils_1.default.V3ToMw(value));
    }
    /**
     * World matrix
     */
    get matrix() {
        return new THREE.Matrix4().compose(this.position, this.rotation, this.scale);
    }
    /**
     * Local matrix
     */
    get localMatrix() {
        return new THREE.Matrix4().compose(this.localPosition, this.localRotation, this.localScale);
    }
    /**
     * Returns a normalized vector representing the blue axis of the transform in world space.
     */
    get forward() {
        return new THREE.Vector3()
            .copy(this.forwardIdentity)
            .applyQuaternion(three_utils_1.default.QuatToThree(this.node.getOrientation()));
    }
    set forward(value) {
        //TODO
        //maybe up vector is needed
        this.node.setOrientation(three_utils_1.default.QuatToMw(new THREE.Quaternion().setFromUnitVectors(this.forwardIdentity, value)));
    }
    /**
     * The green axis of the transform in world space.
     */
    get up() {
        return new THREE.Vector3()
            .copy(this.upIdentity)
            .applyQuaternion(three_utils_1.default.QuatToThree(this.node.getOrientation()));
    }
    set up(value) {
        //maybe forward vector is needed
        this.node.setOrientation(three_utils_1.default.QuatToMw(new THREE.Quaternion().setFromUnitVectors(this.upIdentity, value)));
    }
    /**
     * The red axis of the transform in world space.
     */
    get right() {
        return new THREE.Vector3()
            .copy(this.rightIdentity)
            .applyQuaternion(three_utils_1.default.QuatToThree(this.node.getOrientation()));
    }
    set right(value) {
        //maybe forward vector is needed
        this.node.setOrientation(three_utils_1.default.QuatToMw(new THREE.Quaternion().setFromUnitVectors(this.rightIdentity, value)));
    }
    /**
     * The rotation as Euler angles in radians.
     */
    get eulerAngles() {
        return new THREE.Euler().setFromQuaternion(three_utils_1.default.QuatToThree(this.node.getOrientation()), 'ZXY');
    }
    set eulerAngles(value) {
        let quat = three_utils_1.default.QuatToMw(new THREE.Quaternion().setFromEuler(value));
        this.node.setOrientation(quat, 'absolute', 'world');
    }
    /**
     * The rotation as Euler angles in degrees.
     */
    get eulerAnglesInDegrees() {
        let euler = new THREE.Euler().setFromQuaternion(three_utils_1.default.QuatToThree(this.node.getOrientation()), 'ZXY');
        return {
            x: euler.x * THREE.MathUtils.RAD2DEG,
            y: euler.y * THREE.MathUtils.RAD2DEG,
            z: euler.z * THREE.MathUtils.RAD2DEG,
        };
    }
    /**
     * The rotation as Euler angles in radians relative to the parent transform's rotation.
     */
    get localEulerAngles() {
        return new THREE.Euler().setFromQuaternion(three_utils_1.default.QuatToThree(this.node.getOrientation({ local: true })), 'ZXY');
    }
    set localEulerAngles(value) {
        let quat = three_utils_1.default.QuatToMw(new THREE.Quaternion().setFromEuler(value));
        this.node.setOrientation(quat);
    }
    /**
     * The rotation as Euler angles in degrees relative to the parent transform's rotation.
     */
    get localEulerAnglesInDegrees() {
        let euler = new THREE.Euler().setFromQuaternion(three_utils_1.default.QuatToThree(this.node.getOrientation({ local: true })), 'ZXY');
        return {
            x: euler.x * THREE.MathUtils.RAD2DEG,
            y: euler.y * THREE.MathUtils.RAD2DEG,
            z: euler.z * THREE.MathUtils.RAD2DEG,
        };
    }
    /**
     * Return children transforms
     * Warning! Forward, up and right vectors will be default and might give incorrect result.
     */
    get children() {
        return this.node.children.map((child) => new Transform(child));
    }
    /**
     * Converts the vector from this object's local space to world space.
     *
     * @param pos A vector representing a position in this object's local space.
     * @returns The new converted vector
     */
    localToWorld(pos) {
        return pos.clone().applyMatrix4(this.matrix);
    }
    /**
     * Converts the vector from world space to this object's local space.
     *
     * @param pos A vector representing a position in world space.
     * @returns The new converted vector
     */
    worldToLocal(pos) {
        return pos.clone().applyMatrix4(this.matrix.invert());
    }
    /**
     * Converts the vector from this object's local space to another local space.
     *
     * @param pos A vector representing a position in this object's local space.
     * @param transform The other object which local space we want to use.
     * @returns The new converted vector
     */
    localToLocal(pos, transform) {
        return transform.worldToLocal(this.localToWorld(pos));
    }
    /**
     * Rotates the transform so the forward vector points at /target/'s current positions's X and Z cooridinates.
     * @param pos position too look at
     */
    lookAtXZ(pos) {
        let posXZ = pos.clone();
        posXZ.setY(this.position.y);
        this.lookAt(posXZ);
    }
    /**
     * Rotates the transform so the forward vector points at /target/'s current position.
     * @param pos position too look at
     */
    lookAt(pos) {
        let rotationMatrix = new THREE.Matrix4().lookAt(this.position, pos, this.upIdentity);
        this.node.setOrientation(three_utils_1.default.QuatToMw(new THREE.Quaternion()
            .setFromRotationMatrix(rotationMatrix)
            .multiply(new THREE.Quaternion().setFromUnitVectors(new THREE.Vector3(0, 0, -1), this.forwardIdentity))), 'absolute', 'world');
    }
    /**
     * Look at position and animate it.
     * @param pos position to look at
     * @param duration duration in sec
     * @param overrideCurrentPos overrides this.position during calculation
     */
    async lookAtAnimate(pos, duration, overrideCurrentPos) {
        let rotationMatrix;
        if (overrideCurrentPos) {
            rotationMatrix = new THREE.Matrix4().lookAt(overrideCurrentPos, pos, this.upIdentity);
        }
        else {
            rotationMatrix = new THREE.Matrix4().lookAt(this.position, pos, this.upIdentity);
        }
        await this.animate('orientation', {
            to: three_utils_1.default.QuatToMw(new THREE.Quaternion()
                .setFromRotationMatrix(rotationMatrix)
                .multiply(new THREE.Quaternion().setFromUnitVectors(new THREE.Vector3(0, 0, -1), this.forwardIdentity))),
            duration: duration,
        });
    }
    /**
     * Look at direction.
     * @param dir Direction vector.
     */
    lookAtDir(dir) {
        let rotationMatrix = new THREE.Matrix4().lookAt(dir, new THREE.Vector3(0, 0, 0), this.upIdentity);
        this.node.setOrientation(three_utils_1.default.QuatToMw(new THREE.Quaternion()
            .setFromRotationMatrix(rotationMatrix)
            .multiply(new THREE.Quaternion().setFromUnitVectors(new THREE.Vector3(0, 0, -1), this.forwardIdentity))));
    }
    /**
     * Promise wrapper for Maxwhere Node.animate
     * Animates the Node by changing the specified attribute of its transformation. Animation will change the attribute according to the specified option parameters step by step.
     *
     * @param attribute Transformation type. Possible values are position, scale, orientation. Matching values are Object {x, y, z} for position, scale and Object {w, x, y, z} or {angle, axis} for orientation
     * @param options Options determining the run of the animation.
     * @param complete Callback for completed animation. If repeat is true the animation will be completed only if stopped manually.
     * @returns Promise which resolves when animation is completed
     */
    animate(attribute, options, complete) {
        return new Promise((resolve) => {
            //@ts-ignore
            this.node.animate(attribute, options, () => {
                if (complete) {
                    complete();
                }
                resolve(this.node);
            });
        });
    }
    /**
     * Look at this with maxwhere camera.
     * @param duration animation duration in sec
     * @param offset position offset for camera compared to this.position. If offset is an array the closest position to the current camera position will be chosen.
     */
    async lookAtThisWithCamera(duration, offset) {
        let cameraTargetPosition;
        let camera = new Transform(maxwhere_1.wom.camera, new THREE.Vector3(0, 0, -1));
        if (lodash_1.default.isArray(offset)) {
            let minDistance = Infinity;
            for (let index = 0; index < offset.length; index++) {
                let posCandidate = this.position.add(offset[index]);
                let distance = posCandidate.distanceTo(camera.position);
                if (distance < minDistance) {
                    minDistance = distance;
                    cameraTargetPosition = posCandidate;
                }
            }
        }
        else {
            cameraTargetPosition = this.position.add(offset);
        }
        await Promise.all([
            camera.animate('position', {
                to: three_utils_1.default.V3ToMw(cameraTargetPosition),
                duration: duration,
            }),
            camera.lookAtAnimate(this.position, duration / 2, cameraTargetPosition),
        ]);
    }
    /**
     * Rotate an object along an axis in object space. The axis is assumed to be normalized.
     * @param axis A normalized vector in object space.
     * @param angle The angle in degrees.
     * @returns
     */
    rotateOnAxis(axis, angle) {
        // rotate object on axis in object space
        // axis is assumed to be normalized
        let offsetRotation = new THREE.Quaternion().setFromAxisAngle(axis, angle * THREE.MathUtils.DEG2RAD);
        this.localRotation = this.localRotation.multiply(offsetRotation);
        return this;
    }
    /**
     *  Rotate an object along an axis in world space. The axis is assumed to be normalized.
     * @param axis A normalized vector in object space.
     * @param angle The angle in degrees.
     * @returns
     */
    rotateOnWorldAxis(axis, angle) {
        // rotate object on axis in world space
        // axis is assumed to be normalized
        let offsetRotation = new THREE.Quaternion().setFromAxisAngle(axis, angle * THREE.MathUtils.DEG2RAD);
        this.rotation = this.rotation.multiply(offsetRotation);
        return this;
    }
}
exports.default = Transform;
//# sourceMappingURL=data:application/json;base64,