"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const maxwhere_1 = require("maxwhere");
const Transform_1 = __importDefault(require("./Transform"));
const THREE = __importStar(require("@mxw/three"));
const lodash_1 = __importDefault(require("lodash"));
const three_utils_1 = __importDefault(require("@mxw/three-utils"));
class Camera {
    constructor() {
        this.womCam = new Transform_1.default(maxwhere_1.wom.camera, new THREE.Vector3(0, 0, -1));
    }
    /**
     * Look and move colse to a position with camera.
     * @param position Position to look at
     * @param duration duration of animation in sec
     * @param offset Position offset of camera relative to "position" to look at.
     */
    async lookAndMoveToPosition(position, duration, offset) {
        let cameraTargetPosition;
        if (lodash_1.default.isArray(offset)) {
            let minDistance = Infinity;
            for (let index = 0; index < offset.length; index++) {
                let posCandidate = position.clone().add(offset[index]);
                let distance = posCandidate.distanceTo(this.womCam.position);
                if (distance < minDistance) {
                    minDistance = distance;
                    cameraTargetPosition = posCandidate;
                }
            }
        }
        else {
            cameraTargetPosition = position.clone().add(offset);
        }
        await Promise.all([
            this.womCam.animate('position', {
                to: three_utils_1.default.V3ToMw(cameraTargetPosition),
                duration: duration,
            }),
            this.womCam.lookAtAnimate(position.clone(), duration / 2, cameraTargetPosition),
        ]);
    }
}
let camera = new Camera();
exports.default = camera;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FtZXJhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3dyYXBwZXJzL2NhbWVyYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQStCO0FBQy9CLDREQUFvQztBQUNwQyxrREFBb0M7QUFDcEMsb0RBQXVCO0FBQ3ZCLG1FQUFrQztBQUVsQyxNQUFNLE1BQU07SUFFVjtRQUNFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxtQkFBUyxDQUFDLGNBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxxQkFBcUIsQ0FDekIsUUFBdUIsRUFDdkIsUUFBZ0IsRUFDaEIsTUFBdUM7UUFFdkMsSUFBSSxvQkFBbUMsQ0FBQztRQUV4QyxJQUFJLGdCQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3JCLElBQUksV0FBVyxHQUFHLFFBQVEsQ0FBQztZQUMzQixLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDbEQsSUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUM3RCxJQUFJLFFBQVEsR0FBRyxXQUFXLEVBQUU7b0JBQzFCLFdBQVcsR0FBRyxRQUFRLENBQUM7b0JBQ3ZCLG9CQUFvQixHQUFHLFlBQVksQ0FBQztpQkFDckM7YUFDRjtTQUNGO2FBQU07WUFDTCxvQkFBb0IsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3JEO1FBRUQsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRTtnQkFDOUIsRUFBRSxFQUFFLHFCQUFFLENBQUMsTUFBTSxDQUFDLG9CQUFxQixDQUFDO2dCQUNwQyxRQUFRLEVBQUUsUUFBUTthQUNuQixDQUFDO1lBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQ3ZCLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFDaEIsUUFBUSxHQUFHLENBQUMsRUFDWixvQkFBcUIsQ0FDdEI7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxJQUFJLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBRTFCLGtCQUFlLE1BQU0sQ0FBQyJ9