"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const maxwhere_1 = require("maxwhere");
const util_1 = __importDefault(require("util"));
/**
 * Adds folder paths to collection of resource containing paths. It creates and initializes a new resource group and append paths to that group. Any resource used by wom elements should be available in one of resource folders at the time of element creation (e.g. mesh and physical obj files)
 * @param paths Resource folder paths to add. They can be relative path or absolute path. If given with a single String it will be converted to String[].
 * @param base Base folder for relative paths if paths are defined relatively. Not used otherwise.
 * @param  done Called after the resource group is initialized and populated successfully in maxwhere engine.
 * @returns  The random generated ID of the created resource group.
 */
function addResources(paths, base, done) {
    return new Promise((resolve) => {
        maxwhere_1.wom.addResources(paths, base, (id) => {
            if (done) {
                done();
            }
            resolve(id);
        });
    });
}
/**
 * Creates the specified Nodes and attaches them to this Node instance. Calls create() on every provided Node
 * @param {Node | Array<Node>} element Children to add to this Node instance
 * @returns {Promise}
 */
function render(element) {
    let elemAndDescendants;
    if (element.webview) {
        elemAndDescendants = [
            element.webview,
            ...element.webview.selectAll('*'),
        ];
    }
    else {
        elemAndDescendants = [element, ...element.selectAll('*')];
    }
    let allPromises = elemAndDescendants.map((element) => {
        return new Promise((resolve) => {
            element.once('created', resolve);
        });
    });
    maxwhere_1.wom.render(element);
    return Promise.all(allPromises);
}
/**
 * Log to the F6 dev console of maxwhere
 * @param {any} msg message to display
 * @returns {Promise}
 */
function log(msg) {
    let menu = maxwhere_1.wom.select('#menu');
    menu.browserWindow.webContents.executeJavaScript(`console.log(\`${util_1.default.inspect(msg, true, null)}\`)`);
}
function selfAwareListener(eventName, handler, watching) {
    maxwhere_1.wom.on(eventName, handler);
    // deleted, clear-complete
    if (watching == maxwhere_1.wom) {
        maxwhere_1.wom.once('clear-complete', () => {
            log('wom listener removed');
            maxwhere_1.wom.removeListener(eventName, handler);
        });
    }
    else {
        watching.once('deleted', () => {
            log('node listener removed');
            maxwhere_1.wom.removeListener(eventName, handler);
        });
    }
}
exports.default = {
    render: render,
    addResources: addResources,
    log: log,
    selfAwareListener: selfAwareListener,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29tQXN5bmMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3dyYXBwZXJzL3dvbUFzeW5jLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHVDQTRCa0I7QUFDbEIsZ0RBQXdCO0FBRXhCOzs7Ozs7R0FNRztBQUNILFNBQVMsWUFBWSxDQUNuQixLQUE2QixFQUM3QixJQUFhLEVBQ2IsSUFBZTtJQUVmLE9BQU8sSUFBSSxPQUFPLENBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNyQyxjQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFVLEVBQUUsRUFBRTtZQUMzQyxJQUFJLElBQUksRUFBRTtnQkFDUixJQUFJLEVBQUUsQ0FBQzthQUNSO1lBRUQsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBUyxNQUFNLENBQUMsT0FBd0I7SUFDdEMsSUFBSSxrQkFBa0IsQ0FBQztJQUN2QixJQUFLLE9BQW9CLENBQUMsT0FBTyxFQUFFO1FBQ2pDLGtCQUFrQixHQUFHO1lBQ2xCLE9BQW9CLENBQUMsT0FBTztZQUM3QixHQUFJLE9BQW9CLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7U0FDaEQsQ0FBQztLQUNIO1NBQU07UUFDTCxrQkFBa0IsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFJLE9BQWdCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDckU7SUFDRCxJQUFJLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNuRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDNUIsT0FBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxjQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXBCLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsR0FBRyxDQUFDLEdBQVE7SUFDbkIsSUFBSSxJQUFJLEdBQVksY0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQVksQ0FBQztJQUNuRCxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FDOUMsaUJBQWlCLGNBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUNwRCxDQUFDO0FBQ0osQ0FBQztBQStERCxTQUFTLGlCQUFpQixDQUN4QixTQUFjLEVBQ2QsT0FBaUIsRUFDakIsUUFBb0I7SUFFcEIsY0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0IsMEJBQTBCO0lBQzFCLElBQUksUUFBUSxJQUFJLGNBQUcsRUFBRTtRQUNuQixjQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtZQUM5QixHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUM1QixjQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztLQUNKO1NBQU07UUFDTCxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7WUFDNUIsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFDN0IsY0FBRyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7S0FDSjtBQUNILENBQUM7QUFFRCxrQkFBZTtJQUNiLE1BQU0sRUFBRSxNQUFNO0lBQ2QsWUFBWSxFQUFFLFlBQVk7SUFDMUIsR0FBRyxFQUFFLEdBQUc7SUFDUixpQkFBaUIsRUFBRSxpQkFBaUI7Q0FDckMsQ0FBQyJ9