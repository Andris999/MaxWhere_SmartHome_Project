"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Transform_1 = __importDefault(require("./Transform"));
class MeshTransform extends Transform_1.default {
    constructor(mesh, forwardIdentity, upIdentity, rightIdentity) {
        super(mesh, forwardIdentity, upIdentity, rightIdentity);
        this.mesh = mesh;
        this.materialUniqueNess = [];
        let interval = setInterval(() => {
            if (this.mesh.created) {
                if (this.mesh.subvisuals) {
                    this.mesh.subvisuals().forEach((subvisual) => {
                        this.materialUniqueNess.push(false);
                    });
                    clearInterval(interval);
                }
            }
        }, 1000);
    }
    /**
     * Set material to transparent
     * @param transp
     * @param subvisualNumber
     * @param duration [milisec] changes back to the original state after duration elapsed, if not set, change is permanent
     * @returns
     */
    async setTransparent(transp, subvisualNumber = 0, duration) {
        let material = this.getUniqueMaterial(subvisualNumber);
        material.setTransparentBlend(transp);
        if (duration != undefined) {
            setTimeout(() => {
                material.setTransparentBlend(!transp);
                return;
            }, duration);
        }
        else {
            return;
        }
    }
    /**
     * Set shader of material
     * @param shaderName
     * @param value
     * @param subvisualNumber
     * @param duration [milisec] changes back to the original state after duration elapsed, if not set, change is permanent
     */
    async setShader(shaderName, value, subvisualNumber = 0, duration) {
        let material = this.getUniqueMaterial(subvisualNumber);
        if (duration != undefined) {
            let originalValue = material.shaderValue(shaderName);
            setTimeout(() => {
                material.setShader(shaderName, originalValue);
            }, duration);
        }
        material.setShader(shaderName, value);
    }
    getUniqueMaterial(subvisualNumber = 0) {
        let material;
        if (this.materialUniqueNess[subvisualNumber]) {
            material = this.mesh.material(this.mesh.subvisual(subvisualNumber));
        }
        else {
            this.materialUniqueNess[subvisualNumber] = true;
            material = this.createUniqueMaterial(subvisualNumber);
        }
        return material;
    }
    /**
     * Sets material to transparent, and turns off raycast
     * @param ghost
     * @param subvisualNumber
     * @param duration [milisec] changes back to the original state after duration elapsed, if not set, change is permanent
     * @returns
     */
    setGhostMode(ghost, subvisualNumber = 0, duration) {
        this.setTransparent(ghost, subvisualNumber, duration);
        this.mesh.setPointable(!ghost);
        if (duration != undefined) {
            setTimeout(() => {
                this.mesh.setPointable(ghost);
                return;
            }, duration);
        }
        else {
            return;
        }
    }
    createUniqueMaterial(number) {
        const mat = this.mesh.material(this.mesh.subvisual(number));
        const materialName = '_' + Math.random().toString(36).substr(2, 9); // random unique name for material
        const cloneMat = mat.clone(materialName);
        this.mesh.setMaterial(materialName, number);
        return cloneMat;
    }
}
exports.default = MeshTransform;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzaFRyYW5zZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93cmFwcGVycy9NZXNoVHJhbnNmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBT0EsNERBQW9DO0FBR3BDLE1BQXFCLGFBQWMsU0FBUSxtQkFBUztJQUdsRCxZQUNFLElBQVUsRUFDVixlQUErQixFQUMvQixVQUEwQixFQUMxQixhQUE2QjtRQUU3QixLQUFLLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztRQUM3QixJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFO1lBQzlCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ3JCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7b0JBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7d0JBQzNDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ3RDLENBQUMsQ0FBQyxDQUFDO29CQUNILGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDekI7YUFDRjtRQUNILENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxLQUFLLENBQUMsY0FBYyxDQUNsQixNQUFlLEVBQ2Ysa0JBQTBCLENBQUMsRUFDM0IsUUFBaUI7UUFFakIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRXZELFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVyQyxJQUFJ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