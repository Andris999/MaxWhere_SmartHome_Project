"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const THREE = __importStar(require("@mxw/three"));
const lodash_1 = __importDefault(require("lodash"));
const three_utils_1 = __importDefault(require("@mxw/three-utils"));
const TextGeometry_1 = require("../utils/TextGeometry");
const FontLoader_1 = require("../utils/FontLoader");
class GeometryBuilder {
    /**
     * Get faces of a geometry converted from a three.js BufferGeometry to a maxwhere manualvisual "section".
     *
     *  NOTE: color is only  affected if you use a special "vertex driven" material. For exmaple the built in "Physics/DebugDraw/VertexDriven" material.
     * @param geometry
     * @param material_name name of the material
     * @param color Normalized rgba color, number values are betwenn 0 and 1. Example: {r:1, g:0.5, b:0, a:1}. If "random" is set than every vertex gets a random color.
     * @returns Section
     */
    static getFacesFromGeometry(geometry, material_name, color) {
        //geometry.toNonIndexed();
        const positionAttribute = geometry.toNonIndexed().attributes.position;
        const vertex = new THREE.Vector3();
        let mwGeometry = [];
        if (color && color != 'random') {
            mwGeometry.push({
                type: 'color',
                arg: color,
            });
        }
        for (let vertexIndex = 0; vertexIndex < positionAttribute.count; vertexIndex += 3) {
            if (color == 'random') {
                mwGeometry.push({
                    type: 'color',
                    arg: {
                        r: Math.random(),
                        g: Math.random(),
                        b: Math.random(),
                        a: Math.random(),
                    },
                });
            }
            vertex.fromBufferAttribute(positionAttribute, vertexIndex);
            mwGeometry.push({
                type: 'position',
                arg: { x: vertex.x, y: vertex.y, z: vertex.z },
            });
            vertex.fromBufferAttribute(positionAttribute, vertexIndex + 1);
            mwGeometry.push({
                type: 'position',
                arg: { x: vertex.x, y: vertex.y, z: vertex.z },
            });
            vertex.fromBufferAttribute(positionAttribute, vertexIndex + 2);
            mwGeometry.push({
                type: 'position',
                arg: { x: vertex.x, y: vertex.y, z: vertex.z },
            });
        }
        let section = {
            material_name: material_name,
            renderop: 'trianglelist',
            geometry: mwGeometry,
        };
        return section;
    }
    /**
     * Get wireframe of a geometry converted from a three.js BufferGeometry to a maxwhere manualvisual "section".
     *
     *  NOTE: color is only  affected if you use a special "vertex driven" material. For exmaple the built in "Physics/DebugDraw/VertexDriven" material.
     * @param geometry
     * @param material_name name of the material
     * @param color Normalized rgba color, number values are betwenn 0 and 1. Example: {r:1, g:0.5, b:0, a:1}. If "random" is set than every vertex gets a random color.
     * @returns Section
     */
    static getWireframeFromGeometry(geometry, material_name, color) {
        const wireframeGeometry = new THREE.WireframeGeometry(geometry);
        const positionAttribute = wireframeGeometry.attributes.position;
        const vertex = new THREE.Vector3();
        let mwGeometry = [];
        if (color && color != 'random') {
            mwGeometry.push({
                type: 'color',
                arg: color,
            });
        }
        for (let vertexIndex = 0; vertexIndex < positionAttribute.count; vertexIndex += 2) {
            if (color == 'random') {
                mwGeometry.push({
                    type: 'color',
                    arg: {
                        r: Math.random(),
                        g: Math.random(),
                        b: Math.random(),
                        a: Math.random(),
                    },
                });
            }
            vertex.fromBufferAttribute(positionAttribute, vertexIndex);
            mwGeometry.push({
                type: 'position',
                arg: { x: vertex.x, y: vertex.y, z: vertex.z },
            });
            vertex.fromBufferAttribute(positionAttribute, vertexIndex + 1);
            mwGeometry.push({
                type: 'position',
                arg: { x: vertex.x, y: vertex.y, z: vertex.z },
            });
        }
        let section = {
            material_name: material_name,
            renderop: 'linelist',
            geometry: mwGeometry,
        };
        return section;
    }
    /**
     * Get edges of a geometry converted from a three.js BufferGeometry to a maxwhere manualvisual "section".
     *
     *  NOTE: color is only  affected if you use a special "vertex driven" material. For exmaple the built in "Physics/DebugDraw/VertexDriven" material.
     * @param geometry
     * @param material_name name of the material
     * @param color Normalized rgba color, number values are betwenn 0 and 1. Example: {r:1, g:0.5, b:0, a:1}. If "random" is set than every vertex gets a random color.
     * @returns Section
     */
    static getEdgesFromGeometry(geometry, material_name, color) {
        const wireframeGeometry = new THREE.EdgesGeometry(geometry, 5);
        const positionAttribute = wireframeGeometry.attributes.position;
        const vertex = new THREE.Vector3();
        let mwGeometry = [];
        if (color && color != 'random') {
            mwGeometry.push({
                type: 'color',
                arg: color,
            });
        }
        for (let vertexIndex = 0; vertexIndex < positionAttribute.count; vertexIndex += 2) {
            if (color == 'random') {
                mwGeometry.push({
                    type: 'color',
                    arg: {
                        r: Math.random(),
                        g: Math.random(),
                        b: Math.random(),
                        a: Math.random(),
                    },
                });
            }
            vertex.fromBufferAttribute(positionAttribute, vertexIndex);
            mwGeometry.push({
                type: 'position',
                arg: { x: vertex.x, y: vertex.y, z: vertex.z },
            });
            vertex.fromBufferAttribute(positionAttribute, vertexIndex + 1);
            mwGeometry.push({
                type: 'position',
                arg: { x: vertex.x, y: vertex.y, z: vertex.z },
            });
        }
        let section = {
            material_name: material_name,
            renderop: 'linelist',
            geometry: mwGeometry,
        };
        return section;
    }
    static getLineSectionFromPoints(points, material_name, color) {
        let section = {
            material_name: material_name,
            renderop: 'linestrip',
            geometry: [],
        };
        if (color) {
            if (lodash_1.default.isArray(color)) {
                let posGeometries = this.convertThreePointsToPosGeometryArray(points);
                posGeometries.forEach((posgeometry, index) => {
                    section.geometry.push({
                        type: 'color',
                        arg: {
                            r: ((color[1].r - color[0].r) / points.length) * index +
                                color[0].r,
                            g: ((color[1].g - color[0].g) / points.length) * index +
                                color[0].g,
                            b: ((color[1].b - color[0].b) / points.length) * index +
                                color[0].b,
                            a: ((color[1].a - color[0].a) / points.length) * index +
                                color[0].a,
                        },
                    }, posgeometry);
                });
            }
            else if (color == 'random') {
                let posGeometries = this.convertThreePointsToPosGeometryArray(points);
                posGeometries.forEach((posgeometry) => {
                    section.geometry.push({
                        type: 'color',
                        arg: {
                            r: Math.random(),
                            g: Math.random(),
                            b: Math.random(),
                            a: 1,
                        },
                    }, posgeometry);
                });
            }
            else {
                section.geometry.push({
                    type: 'color',
                    arg: color,
                });
                section.geometry.push(...this.convertThreePointsToPosGeometryArray(points));
            }
        }
        else {
            section.geometry.push(...this.convertThreePointsToPosGeometryArray(points));
        }
        return section;
    }
    static convertThreePointsToPosGeometryArray(points) {
        return points.map((point) => {
            return {
                type: 'position',
                arg: three_utils_1.default.V3ToMw(point),
            };
        });
    }
    /**
     * Get bounding shape from a three.js geometry
     * @param geometry
     * @param type
     * @returns
     */
    static getPhysicalShapeFromGeometry(geometry, type) {
        if (type == 'boundingbox') {
            geometry.computeBoundingBox();
            let bbox = geometry.boundingBox;
            let center = three_utils_1.default.V3ToMw(bbox.getCenter(new THREE.Vector3()));
            let size = bbox.getSize(new THREE.Vector3());
            return {
                offset: center,
                width: size.x,
                height: size.y,
                depth: size.z,
                shape: 'box',
            };
        }
        else if (type == 'boundingsphere') {
            geometry.computeBoundingSphere();
            let bsphere = geometry.boundingSphere;
            let center = three_utils_1.default.V3ToMw(bsphere.center);
            let radius = bsphere.radius;
            return {
                offset: center,
                radius: radius,
                shape: 'sphere',
            };
        }
        return {};
    }
    /**
     * Build a three.js TextGeometry
     * @param text
     * @param parameters
     * @returns
     */
    static getTextGeometry(text, parameters) {
        let textGeometry;
        if (parameters.fontJSON) {
            let font = { font: new FontLoader_1.Font(parameters.fontJSON) };
            textGeometry = new TextGeometry_1.TextGeometry(text, Object.assign(parameters, font));
        }
        else {
            textGeometry = new TextGeometry_1.TextGeometry(text, parameters);
        }
        return textGeometry;
    }
}
exports.default = GeometryBuilder;
//# sourceMappingURL=data:application/json;base64,