import { Color, Section, PhysicalShape } from 'maxwhere';
import * as THREE from '@mxw/three';
import { TextGeometry } from '../utils/TextGeometry';
declare abstract class GeometryBuilder {
    /**
     * Get faces of a geometry converted from a three.js BufferGeometry to a maxwhere manualvisual "section".
     *
     *  NOTE: color is only  affected if you use a special "vertex driven" material. For exmaple the built in "Physics/DebugDraw/VertexDriven" material.
     * @param geometry
     * @param material_name name of the material
     * @param color Normalized rgba color, number values are betwenn 0 and 1. Example: {r:1, g:0.5, b:0, a:1}. If "random" is set than every vertex gets a random color.
     * @returns Section
     */
    static getFacesFromGeometry(geometry: THREE.BufferGeometry, material_name: string, color?: Color | 'random'): Section;
    /**
     * Get wireframe of a geometry converted from a three.js BufferGeometry to a maxwhere manualvisual "section".
     *
     *  NOTE: color is only  affected if you use a special "vertex driven" material. For exmaple the built in "Physics/DebugDraw/VertexDriven" material.
     * @param geometry
     * @param material_name name of the material
     * @param color Normalized rgba color, number values are betwenn 0 and 1. Example: {r:1, g:0.5, b:0, a:1}. If "random" is set than every vertex gets a random color.
     * @returns Section
     */
    static getWireframeFromGeometry(geometry: THREE.BufferGeometry, material_name: string, color?: Color | 'random'): Section;
    /**
     * Get edges of a geometry converted from a three.js BufferGeometry to a maxwhere manualvisual "section".
     *
     *  NOTE: color is only  affected if you use a special "vertex driven" material. For exmaple the built in "Physics/DebugDraw/VertexDriven" material.
     * @param geometry
     * @param material_name name of the material
     * @param color Normalized rgba color, number values are betwenn 0 and 1. Example: {r:1, g:0.5, b:0, a:1}. If "random" is set than every vertex gets a random color.
     * @returns Section
     */
    static getEdgesFromGeometry(geometry: THREE.BufferGeometry, material_name: string, color?: Color | 'random'): Section;
    static getLineSectionFromPoints(points: THREE.Vector3[], material_name: string, color?: Color | [Color, Color] | 'random'): Section;
    private static convertThreePointsToPosGeometryArray;
    /**
     * Get bounding shape from a three.js geometry
     * @param geometry
     * @param type
     * @returns
     */
    static getPhysicalShapeFromGeometry(geometry: THREE.BufferGeometry, type: 'boundingbox' | 'boundingsphere'): PhysicalShape;
    /**
     * Build a three.js TextGeometry
     * @param text
     * @param parameters
     * @returns
     */
    static getTextGeometry(text: string, parameters: THREE.ExtrudeGeometryOptions & {
        fontJSON: object;
        size?: number;
        height?: number;
    }): TextGeometry;
}
export default GeometryBuilder;
