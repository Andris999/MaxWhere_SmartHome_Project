"use strict";
/* Copyright (C) 2015-2019 MISTEMS Ltd. - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const maxwhere_1 = require("maxwhere");
const womAsync_module_1 = __importDefault(require("../wrappers/womAsync.module"));
const utils = __importStar(require("../utils/index"));
const electron_1 = require("electron");
const path_1 = __importDefault(require("path"));
class Gizmo {
    constructor(options) {
        this.spatialGizmo = false;
        this.isGizmoActive = false;
        this.targetTranslate = (event, pos) => {
            var _a;
            (_a = this.target) === null || _a === void 0 ? void 0 : _a.setPosition(pos.x, pos.y, pos.z, 'absolute', 'world');
        };
        this.targetRotate = (event, ori) => {
            var _a;
            (_a = this.target) === null || _a === void 0 ? void 0 : _a.setOrientation(ori.w, ori.x, ori.y, ori.z, 'absolute', 'world');
        };
        this.targetScale = (event, scale) => {
            var _a;
            (_a = this.target) === null || _a === void 0 ? void 0 : _a.setScale(scale.x, scale.y, scale.z);
        };
        this.addOverlay = (options) => {
            let overlay = maxwhere_1.wom.create('overlay', {
                id: 'gizmo-overlay',
                width: maxwhere_1.wom.appConfig.width,
                height: maxwhere_1.wom.appConfig.height,
                'resolution-width': maxwhere_1.wom.appConfig.width,
                'resolution-height': maxwhere_1.wom.appConfig.height,
                scaleFactor: 1,
                // accept mouse events to make it orbit-able
                physical: { raycast: true },
                // URL to load
                url: path_1.default.join(__dirname, '../../', 'controller-window', 'index.html'),
                // accept input events when hovered
                inputDisabled: false,
                nodeIntegration: true,
                transparent: true,
                directKeyEvent: false,
                zorder: 40,
                done: (o) => {
                    //o.hide();
                    this.setActiveAreaToZero();
                    if (this.options.mode == 'editor') {
                        // ipcMain.on('gizmo_toggle_rq', (event, value) => {
                        //   if (value) {
                        //     this.showOverlay();
                        //   } else {
                        //     this.hideOverlay();
                        //   }
                        // });
                    }
                    else {
                        //wom.on('contextMenu', this.showOverlayListener);
                        maxwhere_1.wom.on('click', this.detachTargetListener);
                    }
                    //o.browserWindow.webContents.openDevTools({ mode: 'detach' });
                },
            });
            overlay.once('ready', () => {
                if (options.siblingContentID) {
                    this.sendWebcontentID(options.siblingContentID);
                }
                electron_1.ipcMain.on('set-gizmo-active-areas', (event, activeArea) => {
                    overlay.setActiveAreas(activeArea);
                });
                overlay.browserWindow.webContents.send('set-active-area-sebug-state', this.options.activeAreaDebug);
                if (this.options.snap) {
                    overlay.browserWindow.webContents.send('set-snap', this.options.snap);
                }
                if (this.options.show) {
                    overlay.browserWindow.webContents.send('show-state', this.options.show);
                }
                else {
                    overlay.browserWindow.webContents.send('show-state', {
                        translate: { x: true, y: true, z: true },
                        rotate: { x: true, y: true, z: true },
                        scale: { x: true, y: true, z: true },
                    });
                }
                // send view props for camera init
                this.overlay.browserWindow.webContents.send('view-transfer', 
                //@ts-ignore
                this.getViewProps(maxwhere_1.wom.view));
            });
            maxwhere_1.wom.render(overlay);
            return overlay;
        };
        this.setActiveAreaToZero = async () => {
            await utils.sleep(2000);
            this.overlay.setActiveAreas([{ x: 0, y: 0, w: 0.001, h: 0.001 }]);
        };
        this.setStateChange = (event, state) => {
            if (state && maxwhere_1.wom.isSpatialControlEnabled()) {
                maxwhere_1.wom.setSpatialControl(false);
                this.spatialGizmo = true;
            }
            else if (this.spatialGizmo) {
                maxwhere_1.wom.setSpatialControl(true);
                this.spatialGizmo = false;
            }
            this.isGizmoActive = state;
        };
        this.sendWebcontentID = (webContentID) => {
            this.overlay.browserWindow.webContents.send('sibling-transfer', webContentID);
        };
        this.targetTranslateBackwardsHandler = () => {
            var _a;
            if (!this.isGizmoActive) {
                this.overlay.browserWindow.webContents.send('target-translate-backwards', (_a = this.target) === null || _a === void 0 ? void 0 : _a.getPosition());
            }
        };
        this.targetRotateBackwardsHandler = () => {
            var _a;
            if (!this.isGizmoActive) {
                this.overlay.browserWindow.webContents.send('target-rotate-backwards', (_a = this.target) === null || _a === void 0 ? void 0 : _a.getOrientation());
            }
        };
        this.targetScaleBackwardsHandler = () => {
            var _a;
            if (!this.isGizmoActive) {
                this.overlay.browserWindow.webContents.send('target-scale-backwards', (_a = this.target) === null || _a === void 0 ? void 0 : _a.getScale());
            }
        };
        this.attachTarget = (id) => {
            this.detachTarget();
            if (id) {
                let node = maxwhere_1.wom.select(`#${id}`);
                console.log(`attach gizmo target id: ${id}, url: ${node.url}`);
                this.target = node;
                this.overlay.browserWindow.webContents.send('target-transfer', this.getNodeProps(this.target));
                womAsync_module_1.default.selfAwareListener({ type: 'node-position', subject: this.target.node.GetName() }, this.targetTranslateBackwardsHandler, this.target);
                womAsync_module_1.default.selfAwareListener({ type: 'node-orientation', subject: this.target.node.GetName() }, this.targetRotateBackwardsHandler, this.target);
                womAsync_module_1.default.selfAwareListener({ type: 'node-scale', subject: this.target.node.GetName() }, this.targetScaleBackwardsHandler, this.target);
                womAsync_module_1.default.selfAwareListener({ type: 'node-delete', subject: this.target.node.GetName() }, () => {
                    this.detachTarget();
                }, this.target);
            }
            else {
                this.target = undefined;
            }
        };
        this.attachTargetListener = (event) => {
            if (event.ctrlKey) {
                if (event.target.includes('_physical') && event.is3d) {
                    let id = event.target.replace('_physical', '');
                    console.log(`attach target to gizmo: ${id}`);
                    this.attachTarget(id);
                }
            }
        };
        this.detachTargetListener = (event) => {
            if (this.target && !event.target) {
                this.detachTarget();
                this.setActiveAreaToZero();
            }
        };
        this.sendCameraOrientation = () => {
            this.overlay.browserWindow.webContents.send('camera-orientaion', maxwhere_1.wom.camera.getOrientation());
        };
        this.sendCameraPosition = () => {
            this.overlay.browserWindow.webContents.send('camera-position', maxwhere_1.wom.camera.getPosition());
        };
        this.cameraSync = () => {
            // sync the camera orientation
            maxwhere_1.wom.on({ type: 'node-orientation', subject: 'CogiNavOrbitHelper' }, () => {
                this.sendCameraOrientation();
                this.sendCameraPosition();
            });
            womAsync_module_1.default.selfAwareListener({ type: 'node-position', subject: 'CogiNavOrbitHelper' }, () => {
                this.sendCameraOrientation();
                this.sendCameraPosition();
            }, this.overlay);
            maxwhere_1.wom.on({ type: 'node-orientation', subject: maxwhere_1.wom.camera.node.GetName() }, this.sendCameraOrientation);
            //sync the camera position
            maxwhere_1.wom.on({ type: 'node-position', subject: maxwhere_1.wom.camera.node.GetName() }, this.sendCameraPosition);
        };
        this.options = options;
        this.overlay = this.addOverlay(options);
        this.cameraSync();
        this.targetSync();
        this.resizeSync();
        electron_1.ipcMain.on('gizmo-state', this.setStateChange);
        if (this.options.mode == 'editor') {
            electron_1.ipcMain.on('gizmo_target_rq', (event, id) => {
                this.attachTarget(id);
            });
        }
        else {
            maxwhere_1.wom.on('click', this.attachTargetListener);
        }
    }
    detachTarget() {
        if (this.target && this.target.node) {
            this.overlay.browserWindow.webContents.send('target-transfer', '');
            maxwhere_1.wom.removeListener({ type: 'node-position', subject: this.target.node.GetName() }, this.targetTranslateBackwardsHandler);
            maxwhere_1.wom.removeListener({ type: 'node-orientation', subject: this.target.node.GetName() }, this.targetRotateBackwardsHandler);
            maxwhere_1.wom.removeListener({ type: 'node-scale', subject: this.target.node.GetName() }, this.targetScaleBackwardsHandler);
            this.target = undefined;
        }
        else if (this.target) {
            this.overlay.browserWindow.webContents.send('target-transfer', '');
            this.target = undefined;
        }
    }
    clear() {
        maxwhere_1.wom.removeListener('click', this.detachTargetListener);
        maxwhere_1.wom.removeListener('dblclick', this.attachTargetListener);
        maxwhere_1.wom.removeListener({ type: 'node-orientation', subject: maxwhere_1.wom.camera.node.GetName() }, this.sendCameraOrientation);
        maxwhere_1.wom.removeListener({ type: 'node-position', subject: maxwhere_1.wom.camera.node.GetName() }, this.sendCameraPosition);
        maxwhere_1.wom.removeListener('contextMenu', this.attachTargetListener);
        //wom.removeListener('resize', this.resizeWindow);
        electron_1.ipcMain.removeListener('target-translate', this.targetTranslate);
        electron_1.ipcMain.removeListener('target-rotate', this.targetRotate);
        electron_1.ipcMain.removeListener('target-scale', this.targetScale);
        this.overlay.clear();
    }
    /**
     * Notify renderer process in case resized MaxWhere window
     */
    resizeSync() {
        // wom.on('resize', this.resizeWindow);
        maxwhere_1.wom.on('resize', ({ w, h }) => {
            this.overlay.setResolution(w, h);
            this.overlay.setSize(w, h);
            this.overlay.browserWindow.webContents.send('window-resolution-change', {
                w,
                h,
            });
        });
        maxwhere_1.wom.on('dpi-change', ({ dpi }) => {
            this.overlay.setPixelScaleFactor(dpi);
        });
    }
    /**
     * Register event listereners in case the  target in renderer process changes
     */
    targetSync() {
        electron_1.ipcMain.on('target-translate', this.targetTranslate);
        electron_1.ipcMain.on('target-rotate', this.targetRotate);
        electron_1.ipcMain.on('target-scale', this.targetScale);
    }
    getViewProps(view) {
        let viewProps = {
            FOV: view.GetFoV(),
            far: view.GetClipDistances().far,
            near: view.GetClipDistances().near,
        };
        return viewProps;
    }
    /**
     * Get node props
     * @param {Node} node
     * @returns Node props
     */
    getNodeProps(node) {
        let position = node.getPosition();
        let orientation = node.getOrientation();
        let scale = node.getScale();
        let nodeProps = {
            position: {
                x: position.x,
                y: position.y,
                z: position.z,
            },
            quaternion: {
                x: orientation.x,
                y: orientation.y,
                z: orientation.z,
                w: orientation.w,
            },
            scale: {
                x: scale.x,
                y: scale.y,
                z: scale.z,
            },
        };
        return nodeProps;
    }
    fovSync() { }
}
exports.default = Gizmo;
//# sourceMappingURL=data:application/json;base64,