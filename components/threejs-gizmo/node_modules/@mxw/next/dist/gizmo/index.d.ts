/// <reference types="electron" />
import { Node, Overlay, Vector3, Quaternion, NodeMouseEventObject } from 'maxwhere';
export default class Gizmo {
    options: GizmoOptions;
    spatialGizmo: boolean;
    isGizmoActive: boolean;
    overlay: Overlay;
    target?: Node;
    constructor(options: GizmoOptions);
    targetTranslate: (event: Electron.IpcMainEvent, pos: Vector3) => void;
    targetRotate: (event: Electron.IpcMainEvent, ori: Quaternion) => void;
    targetScale: (event: Electron.IpcMainEvent, scale: Vector3) => void;
    addOverlay: (options: GizmoOptions) => Overlay;
    setActiveAreaToZero: () => Promise<void>;
    setStateChange: (event: Electron.IpcMainEvent, state: boolean) => void;
    sendWebcontentID: (webContentID: string) => void;
    targetTranslateBackwardsHandler: () => void;
    targetRotateBackwardsHandler: () => void;
    targetScaleBackwardsHandler: () => void;
    attachTarget: (id: string) => void;
    detachTarget(): void;
    attachTargetListener: (event: NodeMouseEventObject) => void;
    detachTargetListener: (event: NodeMouseEventObject) => void;
    sendCameraOrientation: () => void;
    sendCameraPosition: () => void;
    cameraSync: () => void;
    clear(): void;
    /**
     * Notify renderer process in case resized MaxWhere window
     */
    resizeSync(): void;
    /**
     * Register event listereners in case the  target in renderer process changes
     */
    targetSync(): void;
    getViewProps(view: any): {
        FOV: any;
        far: any;
        near: any;
    };
    /**
     * Get node props
     * @param {Node} node
     * @returns Node props
     */
    getNodeProps(node: Node): {
        position: {
            x: number;
            y: number;
            z: number;
        };
        quaternion: {
            x: number;
            y: number;
            z: number;
            w: number;
        };
        scale: {
            x: number;
            y: number;
            z: number;
        };
    };
    fovSync(): void;
}
interface GizmoOptions {
    activeAreaDebug?: boolean;
    show?: {
        translate: {
            x: boolean;
            y: boolean;
            z: boolean;
        };
        rotate: {
            x: boolean;
            y: boolean;
            z: boolean;
        };
        scale: {
            x: boolean;
            y: boolean;
            z: boolean;
        };
    };
    snap?: {
        isKeyActive?: boolean;
        translateValue?: number;
        rotateValue?: number;
    };
    mode?: 'editor';
    siblingContentID?: string;
}
export {};
