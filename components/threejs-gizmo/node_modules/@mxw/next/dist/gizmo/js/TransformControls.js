"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransformControlsPlane = exports.TransformControlsGizmo = exports.TransformControls = void 0;
const three_1 = require("@mxw/three");
const _raycaster = new three_1.Raycaster();
const _tempVector = new three_1.Vector3();
const _tempVector2 = new three_1.Vector3();
const _tempQuaternion = new three_1.Quaternion();
const _unit = {
    X: new three_1.Vector3(1, 0, 0),
    Y: new three_1.Vector3(0, 1, 0),
    Z: new three_1.Vector3(0, 0, 1),
};
const _changeEvent = { type: 'change' };
const _mouseDownEvent = { type: 'mouseDown' };
const _mouseUpEvent = { type: 'mouseUp', mode: null };
const _objectChangeEvent = { type: 'objectChange' };
class TransformControls extends three_1.Object3D {
    constructor(camera, domElement) {
        super();
        if (domElement === undefined) {
            console.warn('THREE.TransformControls: The second parameter "domElement" is now mandatory.');
            domElement = document;
        }
        this.visible = false;
        this.domElement = domElement;
        this.domElement.style.touchAction = 'none'; // disable touch scroll
        const _gizmo = new TransformControlsGizmo();
        this._gizmo = _gizmo;
        this.add(_gizmo);
        const _plane = new TransformControlsPlane();
        this._plane = _plane;
        this.add(_plane);
        const scope = this;
        // Defined getter, setter and store for a property
        function defineProperty(propName, defaultValue) {
            let propValue = defaultValue;
            Object.defineProperty(scope, propName, {
                get: function () {
                    return propValue !== undefined ? propValue : defaultValue;
                },
                set: function (value) {
                    if (propValue !== value) {
                        propValue = value;
                        _plane[propName] = value;
                        _gizmo[propName] = value;
                        scope.dispatchEvent({ type: propName + '-changed', value: value });
                        scope.dispatchEvent(_changeEvent);
                    }
                },
            });
            scope[propName] = defaultValue;
            _plane[propName] = defaultValue;
            _gizmo[propName] = defaultValue;
        }
        // Define properties with getters/setter
        // Setting the defined property will automatically trigger change event
        // Defined properties are passed down to gizmo and plane
        defineProperty('camera', camera);
        defineProperty('object', undefined);
        defineProperty('enabled', true);
        defineProperty('axis', null);
        defineProperty('mode', 'translate');
        defineProperty('translationSnap', null);
        defineProperty('rotationSnap', null);
        defineProperty('scaleSnap', null);
        defineProperty('space', 'world');
        defineProperty('size', 1);
        defineProperty('dragging', false);
        defineProperty('showX', true);
        defineProperty('showY', true);
        defineProperty('showZ', true);
        // Reusable utility variables
        const worldPosition = new three_1.Vector3();
        const worldPositionStart = new three_1.Vector3();
        const worldQuaternion = new three_1.Quaternion();
        const worldQuaternionStart = new three_1.Quaternion();
        const cameraPosition = new three_1.Vector3();
        const cameraQuaternion = new three_1.Quaternion();
        const pointStart = new three_1.Vector3();
        const pointEnd = new three_1.Vector3();
        const rotationAxis = new three_1.Vector3();
        const rotationAngle = 0;
        const eye = new three_1.Vector3();
        // TODO: remove properties unused in plane and gizmo
        defineProperty('worldPosition', worldPosition);
        defineProperty('worldPositionStart', worldPositionStart);
        defineProperty('worldQuaternion', worldQuaternion);
        defineProperty('worldQuaternionStart', worldQuaternionStart);
        defineProperty('cameraPosition', cameraPosition);
        defineProperty('cameraQuaternion', cameraQuaternion);
        defineProperty('pointStart', pointStart);
        defineProperty('pointEnd', pointEnd);
        defineProperty('rotationAxis', rotationAxis);
        defineProperty('rotationAngle', rotationAngle);
        defineProperty('eye', eye);
        this._offset = new three_1.Vector3();
        this._startNorm = new three_1.Vector3();
        this._endNorm = new three_1.Vector3();
        this._cameraScale = new three_1.Vector3();
        this._parentPosition = new three_1.Vector3();
        this._parentQuaternion = new three_1.Quaternion();
        this._parentQuaternionInv = new three_1.Quaternion();
        this._parentScale = new three_1.Vector3();
        this._worldScaleStart = new three_1.Vector3();
        this._worldQuaternionInv = new three_1.Quaternion();
        this._worldScale = new three_1.Vector3();
        this._positionStart = new three_1.Vector3();
        this._quaternionStart = new three_1.Quaternion();
        this._scaleStart = new three_1.Vector3();
        this._getPointer = getPointer.bind(this);
        this._onPointerDown = onPointerDown.bind(this);
        this._onPointerHover = onPointerHover.bind(this);
        this._onPointerMove = onPointerMove.bind(this);
        this._onPointerUp = onPointerUp.bind(this);
        this.domElement.addEventListener('pointerdown', this._onPointerDown);
        this.domElement.addEventListener('pointermove', this._onPointerHover);
        this.domElement.addEventListener('pointerup', this._onPointerUp);
    }
    // updateMatrixWorld  updates key transformation variables
    updateMatrixWorld() {
        if (this.object !== undefined) {
            this.object.updateMatrixWorld();
            if (this.object.parent === null) {
                console.error('TransformControls: The attached 3D object must be a part of the scene graph.');
            }
            else {
                this.object.parent.matrixWorld.decompose(this._parentPosition, this._parentQuaternion, this._parentScale);
            }
            this.object.matrixWorld.decompose(this.worldPosition, this.worldQuaternion, this._worldScale);
            this._parentQuaternionInv.copy(this._parentQuaternion).invert();
            this._worldQuaternionInv.copy(this.worldQuaternion).invert();
        }
        this.camera.updateMatrixWorld();
        this.camera.matrixWorld.decompose(this.cameraPosition, this.cameraQuaternion, this._cameraScale);
        this.eye.copy(this.cameraPosition).sub(this.worldPosition).normalize();
        super.updateMatrixWorld(this);
    }
    pointerHover(pointer) {
        if (this.object === undefined || this.dragging === true)
            return;
        _raycaster.setFromCamera(pointer, this.camera);
        const intersect = intersectObjectWithRay(this._gizmo.picker[this.mode], _raycaster);
        if (intersect) {
            this.axis = intersect.object.name;
        }
        else {
            this.axis = null;
        }
    }
    pointerDown(pointer) {
        if (this.object === undefined ||
            this.dragging === true ||
            pointer.button !== 0)
            return;
        if (this.axis !== null) {
            _raycaster.setFromCamera(pointer, this.camera);
            const planeIntersect = intersectObjectWithRay(this._plane, _raycaster, true);
            if (planeIntersect) {
                this.object.updateMatrixWorld();
                this.object.parent.updateMatrixWorld();
                this._positionStart.copy(this.object.position);
                this._quaternionStart.copy(this.object.quaternion);
                this._scaleStart.copy(this.object.scale);
                this.object.matrixWorld.decompose(this.worldPositionStart, this.worldQuaternionStart, this._worldScaleStart);
                this.pointStart.copy(planeIntersect.point).sub(this.worldPositionStart);
            }
            this.dragging = true;
            _mouseDownEvent.mode = this.mode;
            this.dispatchEvent(_mouseDownEvent);
        }
    }
    pointerMove(pointer) {
        const axis = this.axis;
        const mode = this.mode;
        const object = this.object;
        let space = this.space;
        if (mode === 'scale') {
            space = 'local';
        }
        else if (axis === 'E' || axis === 'XYZE' || axis === 'XYZ') {
            space = 'world';
        }
        if (object === undefined ||
            axis === null ||
            this.dragging === false ||
            pointer.button !== -1)
            return;
        _raycaster.setFromCamera(pointer, this.camera);
        const planeIntersect = intersectObjectWithRay(this._plane, _raycaster, true);
        if (!planeIntersect)
            return;
        this.pointEnd.copy(planeIntersect.point).sub(this.worldPositionStart);
        if (mode === 'translate') {
            // Apply translate
            this._offset.copy(this.pointEnd).sub(this.pointStart);
            if (space === 'local' && axis !== 'XYZ') {
                this._offset.applyQuaternion(this._worldQuaternionInv);
            }
            if (axis.indexOf('X') === -1)
                this._offset.x = 0;
            if (axis.indexOf('Y') === -1)
                this._offset.y = 0;
            if (axis.indexOf('Z') === -1)
                this._offset.z = 0;
            if (space === 'local' && axis !== 'XYZ') {
                this._offset
                    .applyQuaternion(this._quaternionStart)
                    .divide(this._parentScale);
            }
            else {
                this._offset
                    .applyQuaternion(this._parentQuaternionInv)
                    .divide(this._parentScale);
            }
            object.position.copy(this._offset).add(this._positionStart);
            // Apply translation snap
            if (this.translationSnap) {
                if (space === 'local') {
                    object.position.applyQuaternion(_tempQuaternion.copy(this._quaternionStart).invert());
                    if (axis.search('X') !== -1) {
                        object.position.x =
                            Math.round(object.position.x / this.translationSnap) *
                                this.translationSnap;
                    }
                    if (axis.search('Y') !== -1) {
                        object.position.y =
                            Math.round(object.position.y / this.translationSnap) *
                                this.translationSnap;
                    }
                    if (axis.search('Z') !== -1) {
                        object.position.z =
                            Math.round(object.position.z / this.translationSnap) *
                                this.translationSnap;
                    }
                    object.position.applyQuaternion(this._quaternionStart);
                }
                if (space === 'world') {
                    if (object.parent) {
                        object.position.add(_tempVector.setFromMatrixPosition(object.parent.matrixWorld));
                    }
                    if (axis.search('X') !== -1) {
                        object.position.x =
                            Math.round(object.position.x / this.translationSnap) *
                                this.translationSnap;
                    }
                    if (axis.search('Y') !== -1) {
                        object.position.y =
                            Math.round(object.position.y / this.translationSnap) *
                                this.translationSnap;
                    }
                    if (axis.search('Z') !== -1) {
                        object.position.z =
                            Math.round(object.position.z / this.translationSnap) *
                                this.translationSnap;
                    }
                    if (object.parent) {
                        object.position.sub(_tempVector.setFromMatrixPosition(object.parent.matrixWorld));
                    }
                }
            }
        }
        else if (mode === 'scale') {
            if (axis.search('XYZ') !== -1) {
                let d = this.pointEnd.length() / this.pointStart.length();
                if (this.pointEnd.dot(this.pointStart) < 0)
                    d *= -1;
                _tempVector2.set(d, d, d);
            }
            else {
                _tempVector.copy(this.pointStart);
                _tempVector2.copy(this.pointEnd);
                _tempVector.applyQuaternion(this._worldQuaternionInv);
                _tempVector2.applyQuaternion(this._worldQuaternionInv);
                _tempVector2.divide(_tempVector);
                if (axis.search('X') === -1) {
                    _tempVector2.x = 1;
                }
                if (axis.search('Y') === -1) {
                    _tempVector2.y = 1;
                }
                if (axis.search('Z') === -1) {
                    _tempVector2.z = 1;
                }
            }
            // Apply scale
            object.scale.copy(this._scaleStart).multiply(_tempVector2);
            if (this.scaleSnap) {
                if (axis.search('X') !== -1) {
                    object.scale.x =
                        Math.round(object.scale.x / this.scaleSnap) * this.scaleSnap ||
                            this.scaleSnap;
                }
                if (axis.search('Y') !== -1) {
                    object.scale.y =
                        Math.round(object.scale.y / this.scaleSnap) * this.scaleSnap ||
                            this.scaleSnap;
                }
                if (axis.search('Z') !== -1) {
                    object.scale.z =
                        Math.round(object.scale.z / this.scaleSnap) * this.scaleSnap ||
                            this.scaleSnap;
                }
            }
        }
        else if (mode === 'rotate') {
            this._offset.copy(this.pointEnd).sub(this.pointStart);
            const ROTATION_SPEED = 20 /
                this.worldPosition.distanceTo(_tempVector.setFromMatrixPosition(this.camera.matrixWorld));
            if (axis === 'E') {
                this.rotationAxis.copy(this.eye);
                this.rotationAngle = this.pointEnd.angleTo(this.pointStart);
                this._startNorm.copy(this.pointStart).normalize();
                this._endNorm.copy(this.pointEnd).normalize();
                this.rotationAngle *=
                    this._endNorm.cross(this._startNorm).dot(this.eye) < 0 ? 1 : -1;
            }
            else if (axis === 'XYZE') {
                this.rotationAxis.copy(this._offset).cross(this.eye).normalize();
                this.rotationAngle =
                    this._offset.dot(_tempVector.copy(this.rotationAxis).cross(this.eye)) * ROTATION_SPEED;
            }
            else if (axis === 'X' || axis === 'Y' || axis === 'Z') {
                this.rotationAxis.copy(_unit[axis]);
                _tempVector.copy(_unit[axis]);
                if (space === 'local') {
                    _tempVector.applyQuaternion(this.worldQuaternion);
                }
                this.rotationAngle =
                    this._offset.dot(_tempVector.cross(this.eye).normalize()) *
                        ROTATION_SPEED;
            }
            // Apply rotation snap
            if (this.rotationSnap)
                this.rotationAngle =
                    Math.round(this.rotationAngle / this.rotationSnap) *
                        this.rotationSnap;
            // Apply rotate
            if (space === 'local' && axis !== 'E' && axis !== 'XYZE') {
                object.quaternion.copy(this._quaternionStart);
                object.quaternion
                    .multiply(_tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle))
                    .normalize();
            }
            else {
                this.rotationAxis.applyQuaternion(this._parentQuaternionInv);
                object.quaternion.copy(_tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle));
                object.quaternion.multiply(this._quaternionStart).normalize();
            }
        }
        this.dispatchEvent(_changeEvent);
        this.dispatchEvent(_objectChangeEvent);
    }
    pointerUp(pointer) {
        if (pointer.button !== 0)
            return;
        if (this.dragging && this.axis !== null) {
            _mouseUpEvent.mode = this.mode;
            this.dispatchEvent(_mouseUpEvent);
        }
        this.dragging = false;
        this.axis = null;
    }
    dispose() {
        this.domElement.removeEventListener('pointerdown', this._onPointerDown);
        this.domElement.removeEventListener('pointermove', this._onPointerHover);
        this.domElement.removeEventListener('pointermove', this._onPointerMove);
        this.domElement.removeEventListener('pointerup', this._onPointerUp);
        this.traverse(function (child) {
            if (child.geometry)
                child.geometry.dispose();
            if (child.material)
                child.material.dispose();
        });
    }
    // Set current object
    attach(object) {
        this.object = object;
        this.visible = true;
        return this;
    }
    // Detatch from object
    detach() {
        this.object = undefined;
        this.visible = false;
        this.axis = null;
        return this;
    }
    reset() {
        if (!this.enabled)
            return;
        if (this.dragging) {
            this.object.position.copy(this._positionStart);
            this.object.quaternion.copy(this._quaternionStart);
            this.object.scale.copy(this._scaleStart);
            this.dispatchEvent(_changeEvent);
            this.dispatchEvent(_objectChangeEvent);
            this.pointStart.copy(this.pointEnd);
        }
    }
    getRaycaster() {
        return _raycaster;
    }
    // TODO: deprecate
    getMode() {
        return this.mode;
    }
    setMode(mode) {
        this.mode = mode;
    }
    setTranslationSnap(translationSnap) {
        this.translationSnap = translationSnap;
    }
    setRotationSnap(rotationSnap) {
        this.rotationSnap = rotationSnap;
    }
    setScaleSnap(scaleSnap) {
        this.scaleSnap = scaleSnap;
    }
    setSize(size) {
        this.size = size;
    }
    setSpace(space) {
        this.space = space;
    }
    update() {
        console.warn('THREE.TransformControls: update function has no more functionality and therefore has been deprecated.');
    }
}
exports.TransformControls = TransformControls;
TransformControls.prototype.isTransformControls = true;
// mouse / touch event handlers
function getPointer(event) {
    if (this.domElement.ownerDocument.pointerLockElement) {
        return {
            x: 0,
            y: 0,
            button: event.button,
        };
    }
    else {
        const rect = this.domElement.getBoundingClientRect();
        return {
            x: ((event.clientX - rect.left) / rect.width) * 2 - 1,
            y: (-(event.clientY - rect.top) / rect.height) * 2 + 1,
            button: event.button,
        };
    }
}
function onPointerHover(event) {
    if (!this.enabled)
        return;
    switch (event.pointerType) {
        case 'mouse':
        case 'pen':
            this.pointerHover(this._getPointer(event));
            break;
    }
}
function onPointerDown(event) {
    if (!this.enabled)
        return;
    if (!document.pointerLockElement) {
        this.domElement.setPointerCapture(event.pointerId);
    }
    this.domElement.addEventListener('pointermove', this._onPointerMove);
    this.pointerHover(this._getPointer(event));
    this.pointerDown(this._getPointer(event));
}
function onPointerMove(event) {
    if (!this.enabled)
        return;
    this.pointerMove(this._getPointer(event));
}
function onPointerUp(event) {
    if (!this.enabled)
        return;
    this.domElement.releasePointerCapture(event.pointerId);
    this.domElement.removeEventListener('pointermove', this._onPointerMove);
    this.pointerUp(this._getPointer(event));
}
function intersectObjectWithRay(object, raycaster, includeInvisible) {
    const allIntersections = raycaster.intersectObject(object, true);
    for (let i = 0; i < allIntersections.length; i++) {
        if (allIntersections[i].object.visible || includeInvisible) {
            return allIntersections[i];
        }
    }
    return false;
}
//
// Reusable utility variables
const _tempEuler = new three_1.Euler();
const _alignVector = new three_1.Vector3(0, 1, 0);
const _zeroVector = new three_1.Vector3(0, 0, 0);
const _lookAtMatrix = new three_1.Matrix4();
const _tempQuaternion2 = new three_1.Quaternion();
const _identityQuaternion = new three_1.Quaternion();
const _dirVector = new three_1.Vector3();
const _tempMatrix = new three_1.Matrix4();
const _unitX = new three_1.Vector3(1, 0, 0);
const _unitY = new three_1.Vector3(0, 1, 0);
const _unitZ = new three_1.Vector3(0, 0, 1);
const _v1 = new three_1.Vector3();
const _v2 = new three_1.Vector3();
const _v3 = new three_1.Vector3();
class TransformControlsGizmo extends three_1.Object3D {
    constructor() {
        super();
        this.type = 'TransformControlsGizmo';
        // shared materials
        const gizmoMaterial = new three_1.MeshBasicMaterial({
            depthTest: false,
            depthWrite: false,
            fog: false,
            toneMapped: false,
            transparent: true,
        });
        const gizmoLineMaterial = new three_1.LineBasicMaterial({
            depthTest: false,
            depthWrite: false,
            fog: false,
            toneMapped: false,
            transparent: true,
        });
        // Make unique material for each axis/color
        const matInvisible = gizmoMaterial.clone();
        matInvisible.opacity = 0.15;
        const matHelper = gizmoLineMaterial.clone();
        matHelper.opacity = 0.5;
        const matRed = gizmoMaterial.clone();
        matRed.color.setHex(0xff0000);
        const matGreen = gizmoMaterial.clone();
        matGreen.color.setHex(0x00ff00);
        const matBlue = gizmoMaterial.clone();
        matBlue.color.setHex(0x0000ff);
        const matRedTransparent = gizmoMaterial.clone();
        matRedTransparent.color.setHex(0xff0000);
        matRedTransparent.opacity = 0.5;
        const matGreenTransparent = gizmoMaterial.clone();
        matGreenTransparent.color.setHex(0x00ff00);
        matGreenTransparent.opacity = 0.5;
        const matBlueTransparent = gizmoMaterial.clone();
        matBlueTransparent.color.setHex(0x0000ff);
        matBlueTransparent.opacity = 0.5;
        const matWhiteTransparent = gizmoMaterial.clone();
        matWhiteTransparent.opacity = 0.25;
        const matYellowTransparent = gizmoMaterial.clone();
        matYellowTransparent.color.setHex(0xffff00);
        matYellowTransparent.opacity = 0.25;
        const matYellow = gizmoMaterial.clone();
        matYellow.color.setHex(0xffff00);
        const matGray = gizmoMaterial.clone();
        matGray.color.setHex(0x787878);
        // reusable geometry
        const arrowGeometry = new three_1.CylinderGeometry(0, 0.04, 0.1, 12);
        arrowGeometry.translate(0, 0.05, 0);
        const scaleHandleGeometry = new three_1.BoxGeometry(0.08, 0.08, 0.08);
        scaleHandleGeometry.translate(0, 0.04, 0);
        const lineGeometry = new three_1.BufferGeometry();
        lineGeometry.setAttribute('position', new three_1.Float32BufferAttribute([0, 0, 0, 1, 0, 0], 3));
        const lineGeometry2 = new three_1.CylinderGeometry(0.0075, 0.0075, 0.5, 3);
        lineGeometry2.translate(0, 0.25, 0);
        function CircleGeometry(radius, arc) {
            const geometry = new three_1.TorusGeometry(radius, 0.0075, 3, 64, arc * Math.PI * 2);
            geometry.rotateY(Math.PI / 2);
            geometry.rotateX(Math.PI / 2);
            return geometry;
        }
        // Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position
        function TranslateHelperGeometry() {
            const geometry = new three_1.BufferGeometry();
            geometry.setAttribute('position', new three_1.Float32BufferAttribute([0, 0, 0, 1, 1, 1], 3));
            return geometry;
        }
        // Gizmo definitions - custom hierarchy definitions for setupGizmo() function
        const gizmoTranslate = {
            X: [
                [new three_1.Mesh(arrowGeometry, matRed), [0.5, 0, 0], [0, 0, -Math.PI / 2]],
                [new three_1.Mesh(arrowGeometry, matRed), [-0.5, 0, 0], [0, 0, Math.PI / 2]],
                [new three_1.Mesh(lineGeometry2, matRed), [0, 0, 0], [0, 0, -Math.PI / 2]],
            ],
            Y: [
                [new three_1.Mesh(arrowGeometry, matGreen), [0, 0.5, 0]],
                [new three_1.Mesh(arrowGeometry, matGreen), [0, -0.5, 0], [Math.PI, 0, 0]],
                [new three_1.Mesh(lineGeometry2, matGreen)],
            ],
            Z: [
                [new three_1.Mesh(arrowGeometry, matBlue), [0, 0, 0.5], [Math.PI / 2, 0, 0]],
                [new three_1.Mesh(arrowGeometry, matBlue), [0, 0, -0.5], [-Math.PI / 2, 0, 0]],
                [new three_1.Mesh(lineGeometry2, matBlue), null, [Math.PI / 2, 0, 0]],
            ],
            XYZ: [
                [
                    new three_1.Mesh(new three_1.OctahedronGeometry(0.1, 0), matWhiteTransparent.clone()),
                    [0, 0, 0],
                ],
            ],
            XY: [
                [
                    new three_1.Mesh(new three_1.BoxGeometry(0.15, 0.15, 0.01), matBlueTransparent.clone()),
                    [0.15, 0.15, 0],
                ],
            ],
            YZ: [
                [
                    new three_1.Mesh(new three_1.BoxGeometry(0.15, 0.15, 0.01), matRedTransparent.clone()),
                    [0, 0.15, 0.15],
                    [0, Math.PI / 2, 0],
                ],
            ],
            XZ: [
                [
                    new three_1.Mesh(new three_1.BoxGeometry(0.15, 0.15, 0.01), matGreenTransparent.clone()),
                    [0.15, 0, 0.15],
                    [-Math.PI / 2, 0, 0],
                ],
            ],
        };
        const pickerTranslate = {
            X: [
                [
                    new three_1.Mesh(new three_1.CylinderGeometry(0.2, 0, 0.6, 4), matInvisible),
                    [0.3, 0, 0],
                    [0, 0, -Math.PI / 2],
                ],
                [
                    new three_1.Mesh(new three_1.CylinderGeometry(0.2, 0, 0.6, 4), matInvisible),
                    [-0.3, 0, 0],
                    [0, 0, Math.PI / 2],
                ],
            ],
            Y: [
                [
                    new three_1.Mesh(new three_1.CylinderGeometry(0.2, 0, 0.6, 4), matInvisible),
                    [0, 0.3, 0],
                ],
                [
                    new three_1.Mesh(new three_1.CylinderGeometry(0.2, 0, 0.6, 4), matInvisible),
                    [0, -0.3, 0],
                    [0, 0, Math.PI],
                ],
            ],
            Z: [
                [
                    new three_1.Mesh(new three_1.CylinderGeometry(0.2, 0, 0.6, 4), matInvisible),
                    [0, 0, 0.3],
                    [Math.PI / 2, 0, 0],
                ],
                [
                    new three_1.Mesh(new three_1.CylinderGeometry(0.2, 0, 0.6, 4), matInvisible),
                    [0, 0, -0.3],
                    [-Math.PI / 2, 0, 0],
                ],
            ],
            XYZ: [[new three_1.Mesh(new three_1.OctahedronGeometry(0.2, 0), matInvisible)]],
            XY: [
                [
                    new three_1.Mesh(new three_1.BoxGeometry(0.2, 0.2, 0.01), matInvisible),
                    [0.15, 0.15, 0],
                ],
            ],
            YZ: [
                [
                    new three_1.Mesh(new three_1.BoxGeometry(0.2, 0.2, 0.01), matInvisible),
                    [0, 0.15, 0.15],
                    [0, Math.PI / 2, 0],
                ],
            ],
            XZ: [
                [
                    new three_1.Mesh(new three_1.BoxGeometry(0.2, 0.2, 0.01), matInvisible),
                    [0.15, 0, 0.15],
                    [-Math.PI / 2, 0, 0],
                ],
            ],
        };
        const helperTranslate = {
            START: [
                [
                    new three_1.Mesh(new three_1.OctahedronGeometry(0.01, 2), matHelper),
                    null,
                    null,
                    null,
                    'helper',
                ],
            ],
            END: [
                [
                    new three_1.Mesh(new three_1.OctahedronGeometry(0.01, 2), matHelper),
                    null,
                    null,
                    null,
                    'helper',
                ],
            ],
            DELTA: [
                [
                    new three_1.Line(TranslateHelperGeometry(), matHelper),
                    null,
                    null,
                    null,
                    'helper',
                ],
            ],
            X: [
                [
                    new three_1.Line(lineGeometry, matHelper.clone()),
                    [-1e3, 0, 0],
                    null,
                    [1e6, 1, 1],
                    'helper',
                ],
            ],
            Y: [
                [
                    new three_1.Line(lineGeometry, matHelper.clone()),
                    [0, -1e3, 0],
                    [0, 0, Math.PI / 2],
                    [1e6, 1, 1],
                    'helper',
                ],
            ],
            Z: [
                [
                    new three_1.Line(lineGeometry, matHelper.clone()),
                    [0, 0, -1e3],
                    [0, -Math.PI / 2, 0],
                    [1e6, 1, 1],
                    'helper',
                ],
            ],
        };
        const gizmoRotate = {
            XYZE: [
                [new three_1.Mesh(CircleGeometry(0.5, 1), matGray), null, [0, Math.PI / 2, 0]],
            ],
            X: [[new three_1.Mesh(CircleGeometry(0.5, 0.5), matRed)]],
            Y: [
                [
                    new three_1.Mesh(CircleGeometry(0.5, 0.5), matGreen),
                    null,
                    [0, 0, -Math.PI / 2],
                ],
            ],
            Z: [
                [
                    new three_1.Mesh(CircleGeometry(0.5, 0.5), matBlue),
                    null,
                    [0, Math.PI / 2, 0],
                ],
            ],
            E: [
                [
                    new three_1.Mesh(CircleGeometry(0.75, 1), matYellowTransparent),
                    null,
                    [0, Math.PI / 2, 0],
                ],
            ],
        };
        const helperRotate = {
            AXIS: [
                [
                    new three_1.Line(lineGeometry, matHelper.clone()),
                    [-1e3, 0, 0],
                    null,
                    [1e6, 1, 1],
                    'helper',
                ],
            ],
        };
        const pickerRotate = {
            XYZE: [[new three_1.Mesh(new three_1.SphereGeometry(0.25, 10, 8), matInvisible)]],
            X: [
                [
                    new three_1.Mesh(new three_1.TorusGeometry(0.5, 0.1, 4, 24), matInvisible),
                    [0, 0, 0],
                    [0, -Math.PI / 2, -Math.PI / 2],
                ],
            ],
            Y: [
                [
                    new three_1.Mesh(new three_1.TorusGeometry(0.5, 0.1, 4, 24), matInvisible),
                    [0, 0, 0],
                    [Math.PI / 2, 0, 0],
                ],
            ],
            Z: [
                [
                    new three_1.Mesh(new three_1.TorusGeometry(0.5, 0.1, 4, 24), matInvisible),
                    [0, 0, 0],
                    [0, 0, -Math.PI / 2],
                ],
            ],
            E: [[new three_1.Mesh(new three_1.TorusGeometry(0.75, 0.1, 2, 24), matInvisible)]],
        };
        const gizmoScale = {
            X: [
                [
                    new three_1.Mesh(scaleHandleGeometry, matRed),
                    [0.5, 0, 0],
                    [0, 0, -Math.PI / 2],
                ],
                [new three_1.Mesh(lineGeometry2, matRed), [0, 0, 0], [0, 0, -Math.PI / 2]],
                [
                    new three_1.Mesh(scaleHandleGeometry, matRed),
                    [-0.5, 0, 0],
                    [0, 0, Math.PI / 2],
                ],
            ],
            Y: [
                [new three_1.Mesh(scaleHandleGeometry, matGreen), [0, 0.5, 0]],
                [new three_1.Mesh(lineGeometry2, matGreen)],
                [
                    new three_1.Mesh(scaleHandleGeometry, matGreen),
                    [0, -0.5, 0],
                    [0, 0, Math.PI],
                ],
            ],
            Z: [
                [
                    new three_1.Mesh(scaleHandleGeometry, matBlue),
                    [0, 0, 0.5],
                    [Math.PI / 2, 0, 0],
                ],
                [new three_1.Mesh(lineGeometry2, matBlue), [0, 0, 0], [Math.PI / 2, 0, 0]],
                [
                    new three_1.Mesh(scaleHandleGeometry, matBlue),
                    [0, 0, -0.5],
                    [-Math.PI / 2, 0, 0],
                ],
            ],
            XY: [
                [
                    new three_1.Mesh(new three_1.BoxGeometry(0.15, 0.15, 0.01), matBlueTransparent),
                    [0.15, 0.15, 0],
                ],
            ],
            YZ: [
                [
                    new three_1.Mesh(new three_1.BoxGeometry(0.15, 0.15, 0.01), matRedTransparent),
                    [0, 0.15, 0.15],
                    [0, Math.PI / 2, 0],
                ],
            ],
            XZ: [
                [
                    new three_1.Mesh(new three_1.BoxGeometry(0.15, 0.15, 0.01), matGreenTransparent),
                    [0.15, 0, 0.15],
                    [-Math.PI / 2, 0, 0],
                ],
            ],
            XYZ: [
                [new three_1.Mesh(new three_1.BoxGeometry(0.1, 0.1, 0.1), matWhiteTransparent.clone())],
            ],
        };
        const pickerScale = {
            X: [
                [
                    new three_1.Mesh(new three_1.CylinderGeometry(0.2, 0, 0.6, 4), matInvisible),
                    [0.3, 0, 0],
                    [0, 0, -Math.PI / 2],
                ],
                [
                    new three_1.Mesh(new three_1.CylinderGeometry(0.2, 0, 0.6, 4), matInvisible),
                    [-0.3, 0, 0],
                    [0, 0, Math.PI / 2],
                ],
            ],
            Y: [
                [
                    new three_1.Mesh(new three_1.CylinderGeometry(0.2, 0, 0.6, 4), matInvisible),
                    [0, 0.3, 0],
                ],
                [
                    new three_1.Mesh(new three_1.CylinderGeometry(0.2, 0, 0.6, 4), matInvisible),
                    [0, -0.3, 0],
                    [0, 0, Math.PI],
                ],
            ],
            Z: [
                [
                    new three_1.Mesh(new three_1.CylinderGeometry(0.2, 0, 0.6, 4), matInvisible),
                    [0, 0, 0.3],
                    [Math.PI / 2, 0, 0],
                ],
                [
                    new three_1.Mesh(new three_1.CylinderGeometry(0.2, 0, 0.6, 4), matInvisible),
                    [0, 0, -0.3],
                    [-Math.PI / 2, 0, 0],
                ],
            ],
            XY: [
                [
                    new three_1.Mesh(new three_1.BoxGeometry(0.2, 0.2, 0.01), matInvisible),
                    [0.15, 0.15, 0],
                ],
            ],
            YZ: [
                [
                    new three_1.Mesh(new three_1.BoxGeometry(0.2, 0.2, 0.01), matInvisible),
                    [0, 0.15, 0.15],
                    [0, Math.PI / 2, 0],
                ],
            ],
            XZ: [
                [
                    new three_1.Mesh(new three_1.BoxGeometry(0.2, 0.2, 0.01), matInvisible),
                    [0.15, 0, 0.15],
                    [-Math.PI / 2, 0, 0],
                ],
            ],
            XYZ: [
                [new three_1.Mesh(new three_1.BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 0, 0]],
            ],
        };
        const helperScale = {
            X: [
                [
                    new three_1.Line(lineGeometry, matHelper.clone()),
                    [-1e3, 0, 0],
                    null,
                    [1e6, 1, 1],
                    'helper',
                ],
            ],
            Y: [
                [
                    new three_1.Line(lineGeometry, matHelper.clone()),
                    [0, -1e3, 0],
                    [0, 0, Math.PI / 2],
                    [1e6, 1, 1],
                    'helper',
                ],
            ],
            Z: [
                [
                    new three_1.Line(lineGeometry, matHelper.clone()),
                    [0, 0, -1e3],
                    [0, -Math.PI / 2, 0],
                    [1e6, 1, 1],
                    'helper',
                ],
            ],
        };
        // Creates an Object3D with gizmos described in custom hierarchy definition.
        function setupGizmo(gizmoMap) {
            const gizmo = new three_1.Object3D();
            for (const name in gizmoMap) {
                for (let i = gizmoMap[name].length; i--;) {
                    const object = gizmoMap[name][i][0].clone();
                    const position = gizmoMap[name][i][1];
                    const rotation = gizmoMap[name][i][2];
                    const scale = gizmoMap[name][i][3];
                    const tag = gizmoMap[name][i][4];
                    // name and tag properties are essential for picking and updating logic.
                    object.name = name;
                    object.tag = tag;
                    if (position) {
                        object.position.set(position[0], position[1], position[2]);
                    }
                    if (rotation) {
                        object.rotation.set(rotation[0], rotation[1], rotation[2]);
                    }
                    if (scale) {
                        object.scale.set(scale[0], scale[1], scale[2]);
                    }
                    object.updateMatrix();
                    const tempGeometry = object.geometry.clone();
                    tempGeometry.applyMatrix4(object.matrix);
                    object.geometry = tempGeometry;
                    object.renderOrder = Infinity;
                    object.position.set(0, 0, 0);
                    object.rotation.set(0, 0, 0);
                    object.scale.set(1, 1, 1);
                    gizmo.add(object);
                }
            }
            return gizmo;
        }
        // Gizmo creation
        this.gizmo = {};
        this.picker = {};
        this.helper = {};
        this.add((this.gizmo['translate'] = setupGizmo(gizmoTranslate)));
        this.add((this.gizmo['rotate'] = setupGizmo(gizmoRotate)));
        this.add((this.gizmo['scale'] = setupGizmo(gizmoScale)));
        this.add((this.picker['translate'] = setupGizmo(pickerTranslate)));
        this.add((this.picker['rotate'] = setupGizmo(pickerRotate)));
        this.add((this.picker['scale'] = setupGizmo(pickerScale)));
        this.add((this.helper['translate'] = setupGizmo(helperTranslate)));
        this.add((this.helper['rotate'] = setupGizmo(helperRotate)));
        this.add((this.helper['scale'] = setupGizmo(helperScale)));
        // Pickers should be hidden always
        this.picker['translate'].visible = false;
        this.picker['rotate'].visible = false;
        this.picker['scale'].visible = false;
    }
    // updateMatrixWorld will update transformations and appearance of individual handles
    updateMatrixWorld(force) {
        const space = this.mode === 'scale' ? 'local' : this.space; // scale always oriented to local rotation
        const quaternion = space === 'local' ? this.worldQuaternion : _identityQuaternion;
        // Show only gizmos for current transform mode
        this.gizmo['translate'].visible = this.mode === 'translate';
        this.gizmo['rotate'].visible = this.mode === 'rotate';
        this.gizmo['scale'].visible = this.mode === 'scale';
        this.helper['translate'].visible = this.mode === 'translate';
        this.helper['rotate'].visible = this.mode === 'rotate';
        this.helper['scale'].visible = this.mode === 'scale';
        let handles = [];
        handles = handles.concat(this.picker[this.mode].children);
        handles = handles.concat(this.gizmo[this.mode].children);
        handles = handles.concat(this.helper[this.mode].children);
        for (let i = 0; i < handles.length; i++) {
            const handle = handles[i];
            // hide aligned to camera
            handle.visible = true;
            handle.rotation.set(0, 0, 0);
            handle.position.copy(this.worldPosition);
            let factor;
            if (this.camera.isOrthographicCamera) {
                factor = (this.camera.top - this.camera.bottom) / this.camera.zoom;
            }
            else {
                factor =
                    this.worldPosition.distanceTo(this.cameraPosition) *
                        Math.min((1.9 * Math.tan((Math.PI * this.camera.fov) / 360)) /
                            this.camera.zoom, 7);
            }
            handle.scale.set(1, 1, 1).multiplyScalar((factor * this.size) / 4);
            // TODO: simplify helpers and consider decoupling from gizmo
            if (handle.tag === 'helper') {
                handle.visible = false;
                if (handle.name === 'AXIS') {
                    handle.position.copy(this.worldPositionStart);
                    handle.visible = !!this.axis;
                    if (this.axis === 'X') {
                        _tempQuaternion.setFromEuler(_tempEuler.set(0, 0, 0));
                        handle.quaternion.copy(quaternion).multiply(_tempQuaternion);
                        if (Math.abs(_alignVector
                            .copy(_unitX)
                            .applyQuaternion(quaternion)
                            .dot(this.eye)) > 0.9) {
                            handle.visible = false;
                        }
                    }
                    if (this.axis === 'Y') {
                        _tempQuaternion.setFromEuler(_tempEuler.set(0, 0, Math.PI / 2));
                        handle.quaternion.copy(quaternion).multiply(_tempQuaternion);
                        if (Math.abs(_alignVector
                            .copy(_unitY)
                            .applyQuaternion(quaternion)
                            .dot(this.eye)) > 0.9) {
                            handle.visible = false;
                        }
                    }
                    if (this.axis === 'Z') {
                        _tempQuaternion.setFromEuler(_tempEuler.set(0, Math.PI / 2, 0));
                        handle.quaternion.copy(quaternion).multiply(_tempQuaternion);
                        if (Math.abs(_alignVector
                            .copy(_unitZ)
                            .applyQuaternion(quaternion)
                            .dot(this.eye)) > 0.9) {
                            handle.visible = false;
                        }
                    }
                    if (this.axis === 'XYZE') {
                        _tempQuaternion.setFromEuler(_tempEuler.set(0, Math.PI / 2, 0));
                        _alignVector.copy(this.rotationAxis);
                        handle.quaternion.setFromRotationMatrix(_lookAtMatrix.lookAt(_zeroVector, _alignVector, _unitY));
                        handle.quaternion.multiply(_tempQuaternion);
                        handle.visible = this.dragging;
                    }
                    if (this.axis === 'E') {
                        handle.visible = false;
                    }
                }
                else if (handle.name === 'START') {
                    handle.position.copy(this.worldPositionStart);
                    handle.visible = this.dragging;
                }
                else if (handle.name === 'END') {
                    handle.position.copy(this.worldPosition);
                    handle.visible = this.dragging;
                }
                else if (handle.name === 'DELTA') {
                    handle.position.copy(this.worldPositionStart);
                    handle.quaternion.copy(this.worldQuaternionStart);
                    _tempVector
                        .set(1e-10, 1e-10, 1e-10)
                        .add(this.worldPositionStart)
                        .sub(this.worldPosition)
                        .multiplyScalar(-1);
                    _tempVector.applyQuaternion(this.worldQuaternionStart.clone().invert());
                    handle.scale.copy(_tempVector);
                    handle.visible = this.dragging;
                }
                else {
                    handle.quaternion.copy(quaternion);
                    if (this.dragging) {
                        handle.position.copy(this.worldPositionStart);
                    }
                    else {
                        handle.position.copy(this.worldPosition);
                    }
                    if (this.axis) {
                        handle.visible = this.axis.search(handle.name) !== -1;
                    }
                }
                // If updating helper, skip rest of the loop
                continue;
            }
            // Align handles to current local or world rotation
            handle.quaternion.copy(quaternion);
            if (this.mode === 'translate' || this.mode === 'scale') {
                // Hide translate and scale axis facing the camera
                const AXIS_HIDE_TRESHOLD = 0.99;
                const PLANE_HIDE_TRESHOLD = 0.2;
                if (handle.name === 'X') {
                    if (Math.abs(_alignVector
                        .copy(_unitX)
                        .applyQuaternion(quaternion)
                        .dot(this.eye)) > AXIS_HIDE_TRESHOLD) {
                        handle.scale.set(1e-10, 1e-10, 1e-10);
                        handle.visible = false;
                    }
                }
                if (handle.name === 'Y') {
                    if (Math.abs(_alignVector
                        .copy(_unitY)
                        .applyQuaternion(quaternion)
                        .dot(this.eye)) > AXIS_HIDE_TRESHOLD) {
                        handle.scale.set(1e-10, 1e-10, 1e-10);
                        handle.visible = false;
                    }
                }
                if (handle.name === 'Z') {
                    if (Math.abs(_alignVector
                        .copy(_unitZ)
                        .applyQuaternion(quaternion)
                        .dot(this.eye)) > AXIS_HIDE_TRESHOLD) {
                        handle.scale.set(1e-10, 1e-10, 1e-10);
                        handle.visible = false;
                    }
                }
                if (handle.name === 'XY') {
                    if (Math.abs(_alignVector
                        .copy(_unitZ)
                        .applyQuaternion(quaternion)
                        .dot(this.eye)) < PLANE_HIDE_TRESHOLD) {
                        handle.scale.set(1e-10, 1e-10, 1e-10);
                        handle.visible = false;
                    }
                }
                if (handle.name === 'YZ') {
                    if (Math.abs(_alignVector
                        .copy(_unitX)
                        .applyQuaternion(quaternion)
                        .dot(this.eye)) < PLANE_HIDE_TRESHOLD) {
                        handle.scale.set(1e-10, 1e-10, 1e-10);
                        handle.visible = false;
                    }
                }
                if (handle.name === 'XZ') {
                    if (Math.abs(_alignVector
                        .copy(_unitY)
                        .applyQuaternion(quaternion)
                        .dot(this.eye)) < PLANE_HIDE_TRESHOLD) {
                        handle.scale.set(1e-10, 1e-10, 1e-10);
                        handle.visible = false;
                    }
                }
            }
            else if (this.mode === 'rotate') {
                // Align handles to current local or world rotation
                _tempQuaternion2.copy(quaternion);
                _alignVector
                    .copy(this.eye)
                    .applyQuaternion(_tempQuaternion.copy(quaternion).invert());
                if (handle.name.search('E') !== -1) {
                    handle.quaternion.setFromRotationMatrix(_lookAtMatrix.lookAt(this.eye, _zeroVector, _unitY));
                }
                if (handle.name === 'X') {
                    _tempQuaternion.setFromAxisAngle(_unitX, Math.atan2(-_alignVector.y, _alignVector.z));
                    _tempQuaternion.multiplyQuaternions(_tempQuaternion2, _tempQuaternion);
                    handle.quaternion.copy(_tempQuaternion);
                }
                if (handle.name === 'Y') {
                    _tempQuaternion.setFromAxisAngle(_unitY, Math.atan2(_alignVector.x, _alignVector.z));
                    _tempQuaternion.multiplyQuaternions(_tempQuaternion2, _tempQuaternion);
                    handle.quaternion.copy(_tempQuaternion);
                }
                if (handle.name === 'Z') {
                    _tempQuaternion.setFromAxisAngle(_unitZ, Math.atan2(_alignVector.y, _alignVector.x));
                    _tempQuaternion.multiplyQuaternions(_tempQuaternion2, _tempQuaternion);
                    handle.quaternion.copy(_tempQuaternion);
                }
            }
            // Hide disabled axes
            handle.visible =
                handle.visible && (handle.name.indexOf('X') === -1 || this.showX);
            handle.visible =
                handle.visible && (handle.name.indexOf('Y') === -1 || this.showY);
            handle.visible =
                handle.visible && (handle.name.indexOf('Z') === -1 || this.showZ);
            handle.visible =
                handle.visible &&
                    (handle.name.indexOf('E') === -1 ||
                        (this.showX && this.showY && this.showZ));
            // highlight selected axis
            handle.material._color =
                handle.material._color || handle.material.color.clone();
            handle.material._opacity =
                handle.material._opacity || handle.material.opacity;
            handle.material.color.copy(handle.material._color);
            handle.material.opacity = handle.material._opacity;
            if (this.enabled && this.axis) {
                if (handle.name === this.axis) {
                    handle.material.color.setHex(0xffff00);
                    handle.material.opacity = 1.0;
                }
                else if (this.axis.split('').some(function (a) {
                    return handle.name === a;
                })) {
                    handle.material.color.setHex(0xffff00);
                    handle.material.opacity = 1.0;
                }
            }
        }
        super.updateMatrixWorld(force);
    }
}
exports.TransformControlsGizmo = TransformControlsGizmo;
TransformControlsGizmo.prototype.isTransformControlsGizmo = true;
//
class TransformControlsPlane extends three_1.Mesh {
    constructor() {
        super(new three_1.PlaneGeometry(100000, 100000, 2, 2), new three_1.MeshBasicMaterial({
            visible: false,
            wireframe: true,
            side: three_1.DoubleSide,
            transparent: true,
            opacity: 0.1,
            toneMapped: false,
        }));
        this.type = 'TransformControlsPlane';
    }
    updateMatrixWorld(force) {
        let space = this.space;
        this.position.copy(this.worldPosition);
        if (this.mode === 'scale')
            space = 'local'; // scale always oriented to local rotation
        _v1
            .copy(_unitX)
            .applyQuaternion(space === 'local' ? this.worldQuaternion : _identityQuaternion);
        _v2
            .copy(_unitY)
            .applyQuaternion(space === 'local' ? this.worldQuaternion : _identityQuaternion);
        _v3
            .copy(_unitZ)
            .applyQuaternion(space === 'local' ? this.worldQuaternion : _identityQuaternion);
        // Align the plane for current transform mode, axis and space.
        _alignVector.copy(_v2);
        switch (this.mode) {
            case 'translate':
            case 'scale':
                switch (this.axis) {
                    case 'X':
                        _alignVector.copy(this.eye).cross(_v1);
                        _dirVector.copy(_v1).cross(_alignVector);
                        break;
                    case 'Y':
                        _alignVector.copy(this.eye).cross(_v2);
                        _dirVector.copy(_v2).cross(_alignVector);
                        break;
                    case 'Z':
                        _alignVector.copy(this.eye).cross(_v3);
                        _dirVector.copy(_v3).cross(_alignVector);
                        break;
                    case 'XY':
                        _dirVector.copy(_v3);
                        break;
                    case 'YZ':
                        _dirVector.copy(_v1);
                        break;
                    case 'XZ':
                        _alignVector.copy(_v3);
                        _dirVector.copy(_v2);
                        break;
                    case 'XYZ':
                    case 'E':
                        _dirVector.set(0, 0, 0);
                        break;
                }
                break;
            case 'rotate':
            default:
                // special case for rotate
                _dirVector.set(0, 0, 0);
        }
        if (_dirVector.length() === 0) {
            // If in rotate mode, make the plane parallel to camera
            this.quaternion.copy(this.cameraQuaternion);
        }
        else {
            _tempMatrix.lookAt(_tempVector.set(0, 0, 0), _dirVector, _alignVector);
            this.quaternion.setFromRotationMatrix(_tempMatrix);
        }
        super.updateMatrixWorld(force);
    }
}
exports.TransformControlsPlane = TransformControlsPlane;
TransformControlsPlane.prototype.isTransformControlsPlane = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhbnNmb3JtQ29udHJvbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ2l6bW8vanMvVHJhbnNmb3JtQ29udHJvbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsc0NBb0JvQjtBQUVwQixNQUFNLFVBQVUsR0FBRyxJQUFJLGlCQUFTLEVBQUUsQ0FBQztBQUVuQyxNQUFNLFdBQVcsR0FBRyxJQUFJLGVBQU8sRUFBRSxDQUFDO0FBQ2xDLE1BQU0sWUFBWSxHQUFHLElBQUksZUFBTyxFQUFFLENBQUM7QUFDbkMsTUFBTSxlQUFlLEdBQUcsSUFBSSxrQkFBVSxFQUFFLENBQUM7QUFDekMsTUFBTSxLQUFLLEdBQUc7SUFDWixDQUFDLEVBQUUsSUFBSSxlQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkIsQ0FBQyxFQUFFLElBQUksZUFBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsRUFBRSxJQUFJLGVBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUN4QixDQUFDO0FBRUYsTUFBTSxZQUFZLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUM7QUFDeEMsTUFBTSxlQUFlLEdBQUcsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLENBQUM7QUFDOUMsTUFBTSxhQUFhLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUN0RCxNQUFNLGtCQUFrQixHQUFHLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxDQUFDO0FBRXBELE1BQU0saUJBQWtCLFNBQVEsZ0JBQVE7SUFDdEMsWUFBWSxNQUFNLEVBQUUsVUFBVTtRQUM1QixLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUM1QixPQUFPLENBQUMsSUFBSSxDQUNWLDhFQUE4RSxD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O1lBQ2pCLEtBQUssT0FBTztnQkFDVixRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUU7b0JBQ2pCLEtBQUssR0FBRzt3QkFDTixZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ3ZDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO3dCQUN6QyxNQUFNO29CQUNSLEtBQUssR0FBRzt3QkFDTixZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ3ZDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO3dCQUN6QyxNQUFNO29CQUNSLEtBQUssR0FBRzt3QkFDTixZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ3ZDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO3dCQUN6QyxNQUFNO29CQUNSLEtBQUssSUFBSTt3QkFDUCxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNyQixNQUFNO29CQUNSLEtBQUssSUFBSTt3QkFDUCxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNyQixNQUFNO29CQUNSLEtBQUssSUFBSTt3QkFDUCxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUN2QixVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNyQixNQUFNO29CQUNSLEtBQUssS0FBSyxDQUFDO29CQUNYLEtBQUssR0FBRzt3QkFDTixVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQ3hCLE1BQU07aUJBQ1Q7Z0JBRUQsTUFBTTtZQUNSLEtBQUssUUFBUSxDQUFDO1lBQ2Q7Z0JBQ0UsMEJBQTBCO2dCQUMxQixVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDM0I7UUFFRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDN0IsdURBQXVEO1lBQ3ZELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQzdDO2FBQU07WUFDTCxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFFdkUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNwRDtRQUVELEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0NBQ0Y7QUFJbUQsd0RBQXNCO0FBRjFFLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMifQ==