export class TransformControls {
    constructor(camera: any, domElement: any);
    visible: boolean;
    domElement: any;
    _gizmo: TransformControlsGizmo;
    _plane: TransformControlsPlane;
    _offset: Vector3;
    _startNorm: Vector3;
    _endNorm: Vector3;
    _cameraScale: Vector3;
    _parentPosition: Vector3;
    _parentQuaternion: Quaternion;
    _parentQuaternionInv: Quaternion;
    _parentScale: Vector3;
    _worldScaleStart: Vector3;
    _worldQuaternionInv: Quaternion;
    _worldScale: Vector3;
    _positionStart: Vector3;
    _quaternionStart: Quaternion;
    _scaleStart: Vector3;
    _getPointer: any;
    _onPointerDown: any;
    _onPointerHover: any;
    _onPointerMove: any;
    _onPointerUp: any;
    updateMatrixWorld(): void;
    pointerHover(pointer: any): void;
    axis: any;
    pointerDown(pointer: any): void;
    dragging: boolean;
    pointerMove(pointer: any): void;
    rotationAngle: any;
    pointerUp(pointer: any): void;
    dispose(): void;
    attach(object: any): TransformControls;
    object: any;
    detach(): TransformControls;
    reset(): void;
    getRaycaster(): any;
    getMode(): any;
    setMode(mode: any): void;
    mode: any;
    setTranslationSnap(translationSnap: any): void;
    translationSnap: any;
    setRotationSnap(rotationSnap: any): void;
    rotationSnap: any;
    setScaleSnap(scaleSnap: any): void;
    scaleSnap: any;
    setSize(size: any): void;
    size: any;
    setSpace(space: any): void;
    space: any;
    update(): void;
    isTransformControls: boolean;
}
export class TransformControlsGizmo {
    type: string;
    gizmo: {};
    picker: {};
    helper: {};
    updateMatrixWorld(force: any): void;
    isTransformControlsGizmo: boolean;
}
export class TransformControlsPlane {
    type: string;
    updateMatrixWorld(force: any): void;
    isTransformControlsPlane: boolean;
}
import { Vector3 } from "@mxw/three/ts/src/math/Vector3";
import { Quaternion } from "@mxw/three/ts/src/math/Quaternion";
