"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const maxwhere_1 = require("maxwhere");
const THREE = __importStar(require("@mxw/three"));
const geometryBuilder_1 = __importDefault(require("../wrappers/geometryBuilder"));
class GridHelperBase {
    drawGrid() {
        let material_name = 'Physics/DebugDraw/VertexDriven';
        const positionAttribute = 
        //@ts-ignore
        this.threeGridHelper.geometry.attributes.position;
        const colorAttribute = 
        //@ts-ignore
        this.threeGridHelper.geometry.attributes.color;
        const vertex = new THREE.Vector3();
        let mwGeometry = [];
        let color = new THREE.Color();
        for (let vertexIndex = 0; vertexIndex < positionAttribute.count; vertexIndex += 2) {
            vertex.fromBufferAttribute(positionAttribute, vertexIndex);
            mwGeometry.push({
                type: 'position',
                arg: { x: vertex.x, y: vertex.y, z: vertex.z },
            });
            color.fromBufferAttribute(colorAttribute, vertexIndex);
            mwGeometry.push({
                type: 'color',
                arg: { r: color.r, g: color.g, b: color.b, a: 1 },
            });
            vertex.fromBufferAttribute(positionAttribute, vertexIndex + 1);
            mwGeometry.push({
                type: 'position',
                arg: { x: vertex.x, y: vertex.y, z: vertex.z },
            });
            color.fromBufferAttribute(colorAttribute, vertexIndex + 1);
            mwGeometry.push({
                type: 'color',
                arg: { r: color.r, g: color.g, b: color.b, a: 1 },
            });
        }
        let section = {
            material_name: material_name,
            renderop: 'linelist',
            geometry: mwGeometry,
        };
        let physical = {};
        if (this.addPhysical) {
            physical.shapes = [
                geometryBuilder_1.default.getPhysicalShapeFromGeometry(
                //@ts-ignore
                this.threeGridHelper.geometry, 'boundingbox'),
            ];
            physical.raycast = true;
        }
        this.gridObj = maxwhere_1.wom.create('manualvisual', {
            sections: [section],
            physical: physical,
        });
        maxwhere_1.wom.render(this.gridObj);
    }
    clear() {
        this.gridObj.clear();
    }
}
exports.default = GridHelperBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZEhlbHBlckJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVyL2dyaWRIZWxwZXJCYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1Q0FPa0I7QUFFbEIsa0RBQW9DO0FBQ3BDLGtGQUEwRDtBQUUxRCxNQUE4QixjQUFjO0lBSTFDLFFBQVE7UUFDTixJQUFJLGFBQWEsR0FBRyxnQ0FBZ0MsQ0FBQztRQUNyRCxNQUFNLGlCQUFpQjtRQUNyQixZQUFZO1FBQ1osSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUNwRCxNQUFNLGNBQWM7UUFDbEIsWUFBWTtRQUNaLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFFakQsTUFBTSxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFbkMsSUFBSSxVQUFVLEdBQXlDLEVBQUUsQ0FBQztRQUUxRCxJQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUU5QixLQUNFLElBQUksV0FBVyxHQUFHLENBQUMsRUFDbkIsV0FBVyxHQUFHLGlCQUFpQixDQUFDLEtBQUssRUFDckMsV0FBVyxJQUFJLENBQUMsRUFDaEI7WUFDQSxNQUFNLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFM0QsVUFBVSxDQUFDLElBQUksQ0FBQztnQkFDZCxJQUFJLEVBQUUsVUFBVTtnQkFDaEIsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUU7YUFDL0MsQ0FBQyxDQUFDO1lBRUgsS0FBSyxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUV2RCxVQUFVLENBQUMsSUFBSSxDQUFDO2dCQUNkLElBQUksRUFBRSxPQUFPO2dCQUNiLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7YUFDbEQsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixFQUFFLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUUvRCxVQUFVLENBQUMsSUFBSSxDQUFDO2dCQUNkLElBQUksRUFBRSxVQUFVO2dCQUNoQixHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRTthQUMvQyxDQUFDLENBQUM7WUFFSCxLQUFLLENBQUMsbUJBQW1CLENBQUMsY0FBYyxFQUFFLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUUzRCxVQUFVLENBQUMsSUFBSSxDQUFDO2dCQUNkLElBQUksRUFBRSxPQUFPO2dCQUNiLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7YUFDbEQsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLE9BQU8sR0FBWTtZQUNyQixhQUFhLEVBQUUsYUFBYTtZQUM1QixRQUFRLEVBQUUsVUFBVTtZQUNwQixRQUFRLEVBQUUsVUFBVTtTQUNyQixDQUFDO1FBQ0YsSUFBSSxRQUFRLEdBQWEsRUFBRSxDQUFDO1FBQzVCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixRQUFRLENBQUMsTUFBTSxHQUFHO2dCQUNoQix5QkFBZSxDQUFDLDRCQUE0QjtnQkFDMUMsWUFBWTtnQkFDWixJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFDN0IsYUFBYSxDQUNkO2FBQ0YsQ0FBQztZQUNGLFFBQVEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxjQUFHLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRTtZQUN4QyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUM7WUFDbkIsUUFBUSxFQUFFLFFBQVE7U0FDbkIsQ0FBQyxDQUFDO1FBQ0gsY0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQWhGRCxpQ0FnRkMifQ==