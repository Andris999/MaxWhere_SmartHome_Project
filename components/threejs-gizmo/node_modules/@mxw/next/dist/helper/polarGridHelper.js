"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const gridHelperBase_1 = __importDefault(require("./gridHelperBase"));
const THREE = __importStar(require("@mxw/three"));
class PolarGridHelper extends gridHelperBase_1.default {
    /**
     * The PolarGridHelper is an object to define polar grids. Grids are two-dimensional arrays of lines.
     * @param radius The radius of the polar grid. This can be any positive number. Default is 10.
     * @param radials The number of radial lines. This can be any positive integer. Default is 16.
     * @param circles The number of circles. This can be any positive integer. Default is 8.
     * @param divisions The number of line segments used for each circle. This can be any positive integer that is 3 or greater. Default is 64.
     * @param addPhysical whether to add physical shape
     * @param color1 The first color used for grid elements. This can be a Color, a hexadecimal value and an CSS-Color name. Default is 0x444444
     * @param color2 The second color used for grid elements. This can be a Color, a hexadecimal value and an CSS-Color name. Default is 0x888888
     */
    constructor(radius, radials, circles, divisions, addPhysical, color1, color2) {
        super();
        this.addPhysical = addPhysical;
        //@ts-ignore
        this.threeGridHelper = new THREE.PolarGridHelper(radius, radials, circles, divisions, color1, color2);
        this.drawGrid();
    }
}
exports.default = PolarGridHelper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9sYXJHcmlkSGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlci9wb2xhckdyaWRIZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHNFQUE4QztBQUM5QyxrREFBbUM7QUFDbkMsTUFBcUIsZUFBZ0IsU0FBUSx3QkFBYztJQUN2RDs7Ozs7Ozs7O09BU0c7SUFDSCxZQUNFLE1BQWUsRUFDZixPQUFnQixFQUNoQixPQUFnQixFQUNoQixTQUFrQixFQUNsQixXQUFxQixFQUNyQixNQUFvQixFQUNwQixNQUFvQjtRQUVwQixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBRS9CLFlBQVk7UUFDWixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FDOUMsTUFBTSxFQUNOLE9BQU8sRUFDUCxPQUFPLEVBQ1AsU0FBUyxFQUNULE1BQU0sRUFDTixNQUFNLENBQ1AsQ0FBQztRQUVGLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQixDQUFDO0NBQ0Y7QUFuQ0gsa0NBbUNHIn0=