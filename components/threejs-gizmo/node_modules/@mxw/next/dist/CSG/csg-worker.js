"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const csg_lib_js_1 = require("./csg-lib.js");
let gWorkersStarted = false;
let gWorker;
let gWorkerUrl;
let taskId = 0;
let tasks = {};
let spawnWorker = () => {
    const worker = new Worker(gWorkerUrl);
    worker.onmessage = function (e) {
        let rslt = JSON.parse(e.data);
        let task = tasks[rslt.taskId];
        delete tasks[rslt.taskId];
        task.resolve(csg_lib_js_1.CSG.fromJSON(rslt.result));
        //console.log('Message received from worker');
        gWorker.busy = false;
    };
    return gWorker = { worker, busy: false };
};
let getWorker = () => {
    if (!gWorkersStarted) {
        gWorkersStarted = true;
        return fetch('../csg-lib.js').then(function (response) {
            return response.text().then(function (text) {
                text = text.slice(0, text.lastIndexOf('export'));
                const code = text + `
                    self.onmessage=(message)=>{
                    let task = JSON.parse(message.data)
                    //console.log("Got task:"+task.op+' '+task.taskId)
                    postMessage(JSON.stringify({
                        taskId:task.taskId,
                        result : CSG.fromJSON(task.a)[task.op](CSG.fromJSON(task.b))
                    }))
                }
                console.log('CSG worker started!')`;
                const blob = new Blob([code], {
                    type: 'application/javascript'
                });
                gWorkerUrl = URL.createObjectURL(blob);
            }).then(() => {
                return spawnWorker();
            });
        });
    }
    if (gWorker && (!gWorker.busy)) {
        gWorker.busy = true;
        return { then: (fn) => { return fn(gWorker); } };
    }
    return {
        then: function () { return this; }
    };
};
csg_lib_js_1.CSG.doAsync = (a, op, b) => {
    return getWorker().then((worker) => {
        let task = { a, op, b, taskId };
        tasks[taskId] = task;
        taskId++;
        task.result = new Promise((resolve, reject) => {
            task.resolve = resolve;
            //console.log("posting to worker:")
            worker.busy = true;
            worker.worker.postMessage(JSON.stringify(task));
        });
        return task.result;
    });
};
exports.default = {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NnLXdvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9DU0cvY3NnLXdvcmtlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUFnQztBQUdoQyxJQUFJLGVBQWUsR0FBRyxLQUFLLENBQUM7QUFDNUIsSUFBSSxPQUFPLENBQUM7QUFDWixJQUFJLFVBQVUsQ0FBQztBQUVmLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztBQUNmLElBQUksS0FBSyxHQUFDLEVBQUUsQ0FBQTtBQUNaLElBQUksV0FBVyxHQUFDLEdBQUUsRUFBRTtJQUNoQixNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUVyQyxNQUFNLENBQUMsU0FBUyxHQUFHLFVBQVMsQ0FBQztRQUMxQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM3QixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQzdCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO1FBQ3ZDLDhDQUE4QztRQUM5QyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDLENBQUE7SUFDRCxPQUFPLE9BQU8sR0FBRyxFQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLENBQUM7QUFDekMsQ0FBQyxDQUFBO0FBRUQsSUFBSSxTQUFTLEdBQUMsR0FBRSxFQUFFO0lBQ2QsSUFBRyxDQUFDLGVBQWUsRUFBQztRQUNoQixlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLE9BQU8sS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFTLFFBQVE7WUFDaEQsT0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVMsSUFBSTtnQkFDckMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDakQsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHOzs7Ozs7Ozs7bURBU2UsQ0FBQTtnQkFDbkMsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQztvQkFDekIsSUFBSSxFQUFFLHdCQUF3QjtpQkFDakMsQ0FBQyxDQUFBO2dCQUNGLFVBQVUsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRzNDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFFLEVBQUU7Z0JBQ1IsT0FBTyxXQUFXLEVBQUUsQ0FBQTtZQUN4QixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFDO0tBQ047SUFDRCxJQUFHLE9BQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFDO1FBQzFCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRXBCLE9BQU8sRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFFLEVBQUMsRUFBRSxHQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUEsQ0FBQyxFQUFDLENBQUE7S0FDNUM7SUFDRCxPQUFNO1FBQ0YsSUFBSSxFQUFDLGNBQVcsT0FBTyxJQUFJLENBQUEsQ0FBQSxDQUFDO0tBQy9CLENBQUE7QUFDTCxDQUFDLENBQUE7QUFFRCxnQkFBRyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLEVBQUU7SUFDbEIsT0FBTyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUMsRUFBRTtRQUM5QixJQUFJLElBQUksR0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFBO1FBQ3hCLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUM7UUFDbkIsTUFBTSxFQUFFLENBQUM7UUFDVCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFDLE1BQU0sRUFBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1lBQ3ZCLG1DQUFtQztZQUNuQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNuQixNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDbkQsQ0FBQyxDQUFDLENBQUE7UUFDRixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUE7SUFDdEIsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDLENBQUE7QUFFRCxrQkFBZSxFQUFFLENBQUEifQ==