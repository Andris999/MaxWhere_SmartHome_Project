export class CSG {
    polygons: any[];
    clone(): CSG;
    toPolygons(): any[];
    union(csg: any): CSG;
    subtract(csg: any): CSG;
    intersect(csg: any): CSG;
    inverse(): CSG;
}
export namespace CSG {
    function fromPolygons(polygons: any): CSG;
    function fromJSON(json: any): CSG;
}
export class Vertex {
    constructor(pos: any, normal: any, uv: any, color: any);
    pos: Vector;
    normal: Vector;
    uv: Vector;
    color: Vector;
    clone(): Vertex;
    flip(): void;
    interpolate(other: any, t: any): Vertex;
}
export class Vector {
    constructor(x?: number, y?: number, z?: number);
    x: number;
    y: number;
    z: number;
    copy(v: any): Vector;
    clone(): Vector;
    negate(): Vector;
    add(a: any): Vector;
    sub(a: any): Vector;
    times(a: any): Vector;
    dividedBy(a: any): Vector;
    lerp(a: any, t: any): Vector;
    unit(): Vector;
    length(): number;
    normalize(): Vector;
    cross(b: any): Vector;
    dot(b: any): number;
}
export class Polygon {
    constructor(vertices: any, shared: any);
    vertices: any;
    shared: any;
    plane: Plane;
    clone(): Polygon;
    flip(): void;
}
export class Plane {
    constructor(normal: any, w: any);
    normal: any;
    w: any;
    clone(): Plane;
    flip(): void;
    splitPolygon(polygon: any, coplanarFront: any, coplanarBack: any, front: any, back: any): void;
}
export namespace Plane {
    const EPSILON: number;
    function fromPoints(a: any, b: any, c: any): Plane;
}
