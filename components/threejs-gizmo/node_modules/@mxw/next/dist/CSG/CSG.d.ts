import * as THREE from '@mxw/three';
export default abstract class CSG {
    /**
     * Get union of two geometry
     * @param a_geometry
     * @param b_geometry
     * @returns
     */
    static union(a_geometry: THREE.BufferGeometry, b_geometry: THREE.BufferGeometry): THREE.BufferGeometry;
    /**
     * Subtract b from a geometry
     * @param a_geometry
     * @param b_geometry
     * @returns
     */
    static subtract(a_geometry: THREE.BufferGeometry, b_geometry: THREE.BufferGeometry): THREE.BufferGeometry;
    /**
     * Intersection of a and b geometry
     * @param a_geometry
     * @param b_geometry
     * @returns
     */
    static intersect(a_geometry: THREE.BufferGeometry, b_geometry: THREE.BufferGeometry): THREE.BufferGeometry;
    /**
     * Invert geometry
     * @param a_geometry
     * @returns
     */
    static inverse(a_geometry: THREE.BufferGeometry): THREE.BufferGeometry;
}
