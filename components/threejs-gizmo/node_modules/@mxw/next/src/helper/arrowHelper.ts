import GeometryBuilder from '../wrappers/geometryBuilder';
import * as THREE from '@mxw/three';
import U3 from '@mxw/three-utils';
import { Color, ManualVisual, Section, wom } from 'maxwhere';

export default class ArrowHelper {
    lineSection: Section;
    coneSection: Section;
    arrowObj: ManualVisual;
    color: Color;
    dir: THREE.Vector3;
    origin: THREE.Vector3;
    length: number;
    material_name: string;
    headLength: number;
    headWidth: number;
    constructor(
      dir: THREE.Vector3,
      origin: THREE.Vector3,
      length: number = 100,
      material_name: string = 'Physics/DebugDraw/VertexDriven',
      color: Color = { r: 1, g: 0, b: 0, a: 1 },
      headLength = 0.2 * length,
      headWidth = 0.2 * headLength,
    ) {
      this.dir = dir;

      this.color = color;
      this.origin = origin;
      this.length = length;
      this.material_name = material_name;
      this.headLength = headLength;
      this.headWidth = headWidth;

      this.calculateSections();

      this.arrowObj = wom.create('manualvisual', {
        sections: [this.lineSection, this.coneSection],
      });
      wom.render(this.arrowObj);
    }

    updateVisual() {
      this.calculateSections();
      this.arrowObj.updateSection(0, this.lineSection.geometry),
        this.arrowObj.updateSection(1, this.coneSection.geometry);
    }

    private calculateSections() {
      let endPoint = this.origin
        .clone()
        .add(this.dir.clone().multiplyScalar(this.length));

      this.lineSection = {
        material_name: this.material_name,
        renderop: 'linelist',
        geometry: [
          { type: 'color', arg: this.color },
          { type: 'position', arg: U3.V3ToMw(this.origin) },
          {
            type: 'position',
            arg: U3.V3ToMw(endPoint),
          },
        ],
      };

      let coneGeometry = new THREE.ConeGeometry(
        this.headWidth,
        this.headLength,
      );
      coneGeometry.applyQuaternion(
        new THREE.Quaternion().setFromUnitVectors(
          new THREE.Vector3(0, 1, 0),
          this.dir,
        ),
      );
      coneGeometry.translate(endPoint.x, endPoint.y, endPoint.z);

      this.coneSection = GeometryBuilder.getFacesFromGeometry(
        coneGeometry,
        this.material_name,
        this.color,
      );
    }

    clear() {
      this.arrowObj.clear();
    }
  }
