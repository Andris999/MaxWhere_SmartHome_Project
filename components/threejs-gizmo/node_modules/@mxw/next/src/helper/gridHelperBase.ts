import {
  wom,
  ManualVisual,
  Section,
  PositionGeometry,
  ColorGeometry,
  Physical,
} from 'maxwhere';

import * as THREE from '@mxw/three';
import GeometryBuilder from '../wrappers/geometryBuilder';

export default abstract class GridHelperBase {
  gridObj!: ManualVisual;
  threeGridHelper!: object;
  addPhysical?: boolean;
  drawGrid() {
    let material_name = 'Physics/DebugDraw/VertexDriven';
    const positionAttribute: THREE.BufferAttribute =
      //@ts-ignore
      this.threeGridHelper.geometry.attributes.position;
    const colorAttribute: THREE.BufferAttribute =
      //@ts-ignore
      this.threeGridHelper.geometry.attributes.color;

    const vertex = new THREE.Vector3();

    let mwGeometry: (PositionGeometry | ColorGeometry)[] = [];

    let color = new THREE.Color();

    for (
      let vertexIndex = 0;
      vertexIndex < positionAttribute.count;
      vertexIndex += 2
    ) {
      vertex.fromBufferAttribute(positionAttribute, vertexIndex);

      mwGeometry.push({
        type: 'position',
        arg: { x: vertex.x, y: vertex.y, z: vertex.z },
      });

      color.fromBufferAttribute(colorAttribute, vertexIndex);

      mwGeometry.push({
        type: 'color',
        arg: { r: color.r, g: color.g, b: color.b, a: 1 },
      });

      vertex.fromBufferAttribute(positionAttribute, vertexIndex + 1);

      mwGeometry.push({
        type: 'position',
        arg: { x: vertex.x, y: vertex.y, z: vertex.z },
      });

      color.fromBufferAttribute(colorAttribute, vertexIndex + 1);

      mwGeometry.push({
        type: 'color',
        arg: { r: color.r, g: color.g, b: color.b, a: 1 },
      });
    }

    let section: Section = {
      material_name: material_name,
      renderop: 'linelist',
      geometry: mwGeometry,
    };
    let physical: Physical = {};
    if (this.addPhysical) {
      physical.shapes = [
        GeometryBuilder.getPhysicalShapeFromGeometry(
          //@ts-ignore
          this.threeGridHelper.geometry,
          'boundingbox',
        ),
      ];
      physical.raycast = true;
    }

    this.gridObj = wom.create('manualvisual', {
      sections: [section],
      physical: physical,
    });
    wom.render(this.gridObj);
  }

  clear() {
    this.gridObj.clear();
  }
}
