import { wom } from 'maxwhere';
import Transform from './Transform';
import * as THREE from '@mxw/three';
import _ from 'lodash';
import U3 from '@mxw/three-utils';

class Camera {
  womCam: Transform;
  constructor() {
    this.womCam = new Transform(wom.camera, new THREE.Vector3(0, 0, -1));
  }

  /**
   * Look and move colse to a position with camera.
   * @param position Position to look at
   * @param duration duration of animation in sec
   * @param offset Position offset of camera relative to "position" to look at.
   */
  async lookAndMoveToPosition(
    position: THREE.Vector3,
    duration: number,
    offset: THREE.Vector3 | THREE.Vector3[],
  ) {
    let cameraTargetPosition: THREE.Vector3;

    if (_.isArray(offset)) {
      let minDistance = Infinity;
      for (let index = 0; index < offset.length; index++) {
        let posCandidate = position.clone().add(offset[index]);
        let distance = posCandidate.distanceTo(this.womCam.position);
        if (distance < minDistance) {
          minDistance = distance;
          cameraTargetPosition = posCandidate;
        }
      }
    } else {
      cameraTargetPosition = position.clone().add(offset);
    }

    await Promise.all([
      this.womCam.animate('position', {
        to: U3.V3ToMw(cameraTargetPosition!),
        duration: duration,
      }),
      this.womCam.lookAtAnimate(
        position.clone(),
        duration / 2,
        cameraTargetPosition!,
      ),
    ]);
  }
}

let camera = new Camera();

export default camera;
