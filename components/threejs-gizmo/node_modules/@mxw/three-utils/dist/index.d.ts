import * as THREE from '@mxw/three';
import { Quaternion, Vector3 } from 'maxwhere';
declare type AngleAxis = {
    axis: {
        x: number;
        y: number;
        z: number;
    };
    angle: number;
};
/**
 * Converts Three.js Quatrenion to MaxWhere quaterion.
 * @param q
 * @returns
 */
declare function QuatToMw(q: THREE.Quaternion): Quaternion;
/**
 * Converts Three.js Vector3 to MaxWhere vector.
 * @param v
 * @returns
 */
declare function V3ToMw(v: THREE.Vector3): Vector3;
/**
 * Converts MaxWhere vector to Three.js Vector3
 * @param pos
 * @returns
 */
declare function V3ToThree(pos: Vector3): THREE.Vector3;
/**
 * Convert MaxWhere quaternion to Three.js Quaternion
 * @param ori
 * @returns
 */
declare function QuatToThree(ori: Quaternion): THREE.Quaternion;
/**
 * Rotates a MaxWhere quaternion on an axis by a defined angle
 * @param quaterion initial quaternion
 * @param axis A normalized vector representing the axis
 * @param angle angle in degree
 * @returns
 */
declare function rotateQuaternionOnAxis(quaterion: Quaternion, axis: Vector3, angle: number): Quaternion;
/**
 * Look at a direction with an object.
 * @param forward forward direction at identity quaternion
 * @param up up direction at identity quaternion
 * @param dir direction vector to rotate to
 * @returns
 */
declare function lookAtDir(forward: THREE.Vector3, up: THREE.Vector3, dir: THREE.Vector3): Quaternion;
/**
 * Look at a direction with an object.
 * @param forward forward direction at identity quaternion
 * @param up up direction at identity quaternion
 * @param dir direction vector to rotate to
 * @returns
 */
declare function lookAt(fromPos: THREE.Vector3, toPos: THREE.Vector3, forward?: THREE.Vector3, up?: THREE.Vector3): THREE.Quaternion;
declare function worldToLocal(pos: THREE.Vector3, matrix: THREE.Matrix4): THREE.Vector3;
/**
 * Translates MaxWhere vector on a direction by a defined distance
 * @param position Initial position
 * @param direction direction vector
 * @param distance
 * @returns
 */
declare function translatePositionOnDirection(position: Vector3, direction: Vector3, distance: number): Vector3;
declare function V3Flip(pos: Vector3): THREE.Vector3;
/**
 * Converts quaternion to angle and axis
 * @param quat quaternion
 * @returns AngleAxis object
 */
declare function getAngleAxisFromQuaternion(quat: THREE.Quaternion): AngleAxis;
declare const _default: {
    QuatToMw: typeof QuatToMw;
    V3ToMw: typeof V3ToMw;
    V3ToThree: typeof V3ToThree;
    QuatToThree: typeof QuatToThree;
    translatePositionOnDirection: typeof translatePositionOnDirection;
    V3Flip: typeof V3Flip;
    rotateQuaternionOnAxis: typeof rotateQuaternionOnAxis;
    lookAt: typeof lookAt;
    lookAtDir: typeof lookAtDir;
    getAngleAxisFromQuaternion: typeof getAngleAxisFromQuaternion;
    worldToLocal: typeof worldToLocal;
};
export default _default;
