"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Collection of 3D Utility functions
const THREE = __importStar(require("@mxw/three"));
/**
 * Converts Three.js Quatrenion to MaxWhere quaterion.
 * @param q
 * @returns
 */
function QuatToMw(q) {
    return {
        x: q.x,
        y: q.y,
        z: q.z,
        w: q.w,
    };
}
/**
 * Converts Three.js Vector3 to MaxWhere vector.
 * @param v
 * @returns
 */
function V3ToMw(v) {
    return {
        x: v.x,
        y: v.y,
        z: v.z,
    };
}
/**
 * Converts MaxWhere vector to Three.js Vector3
 * @param pos
 * @returns
 */
function V3ToThree(pos) {
    return new THREE.Vector3(pos.x, pos.y, pos.z);
}
/**
 * Convert MaxWhere quaternion to Three.js Quaternion
 * @param ori
 * @returns
 */
function QuatToThree(ori) {
    return new THREE.Quaternion(ori.x, ori.y, ori.z, ori.w);
}
/**
 * Rotates a MaxWhere quaternion on an axis by a defined angle
 * @param quaterion initial quaternion
 * @param axis A normalized vector representing the axis
 * @param angle angle in degree
 * @returns
 */
function rotateQuaternionOnAxis(quaterion, axis, angle) {
    let baseOri = QuatToThree(quaterion);
    let rotateOffset = new THREE.Quaternion().setFromAxisAngle(V3ToThree(axis), THREE.MathUtils.degToRad(angle));
    let newOri = QuatToMw(new THREE.Quaternion().multiplyQuaternions(baseOri, rotateOffset));
    return newOri;
}
/**
 * Look at a direction with an object.
 * @param forward forward direction at identity quaternion
 * @param up up direction at identity quaternion
 * @param dir direction vector to rotate to
 * @returns
 */
function lookAtDir(forward, up, dir) {
    let rotationMatrix = new THREE.Matrix4().lookAt(dir, new THREE.Vector3(0, 0, 0), up);
    let ori = QuatToMw(new THREE.Quaternion()
        .setFromRotationMatrix(rotationMatrix)
        .multiply(new THREE.Quaternion().setFromUnitVectors(new THREE.Vector3(0, 0, -1), forward)));
    return ori;
}
/**
 * Look at a direction with an object.
 * @param forward forward direction at identity quaternion
 * @param up up direction at identity quaternion
 * @param dir direction vector to rotate to
 * @returns
 */
function lookAt(fromPos, toPos, forward, up) {
    let rotationMatrix = new THREE.Matrix4().lookAt(fromPos, toPos, up || new THREE.Vector3(0, 1, 0));
    let ori = new THREE.Quaternion()
        .setFromRotationMatrix(rotationMatrix)
        .multiply(new THREE.Quaternion().setFromUnitVectors(new THREE.Vector3(0, 0, -1), forward || new THREE.Vector3(0, 0, 1)));
    return ori;
}
function worldToLocal(pos, matrix) {
    return pos.clone().applyMatrix4(matrix.clone().invert());
}
/**
 * Translates MaxWhere vector on a direction by a defined distance
 * @param position Initial position
 * @param direction direction vector
 * @param distance
 * @returns
 */
function translatePositionOnDirection(position, direction, distance) {
    return V3ToMw(V3ToThree(direction).multiplyScalar(distance).add(V3ToThree(position)));
}
function V3Flip(pos) {
    return new THREE.Vector3(1 / pos.x, 1 / pos.y, 1 / pos.z);
}
/**
 * Converts quaternion to angle and axis
 * @param quat quaternion
 * @returns AngleAxis object
 */
function getAngleAxisFromQuaternion(quat) {
    let axis = { x: 0, y: 0, z: 0 };
    if (quat.w > 1)
        quat.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised
    let angle = THREE.MathUtils.radToDeg(2 * Math.acos(quat.w));
    let s = Math.sqrt(1 - quat.w * quat.w); // assuming quaternion normalised then w is less than 1, so term always positive.
    if (s < 0.001) {
        // test to avoid divide by zero, s is always positive due to sqrt
        // if s close to zero then direction of axis not important
        axis.x = quat.x; // if it is important that axis is normalised then replace with x=1; y=z=0;
        axis.y = quat.y;
        axis.z = quat.z;
    }
    else {
        axis.x = quat.x / s; // normalise axis
        axis.y = quat.y / s;
        axis.z = quat.z / s;
    }
    axis.x = Math.round(axis.x * 100) / 100;
    axis.y = Math.round(axis.y * 100) / 100;
    axis.z = Math.round(axis.z * 100) / 100;
    return { axis: axis, angle: angle };
}
exports.default = {
    QuatToMw,
    V3ToMw,
    V3ToThree,
    QuatToThree,
    translatePositionOnDirection,
    V3Flip,
    rotateQuaternionOnAxis,
    lookAt: lookAt,
    lookAtDir: lookAtDir,
    getAngleAxisFromQuaternion,
    worldToLocal: worldToLocal,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscUNBQXFDO0FBQ3JDLGtEQUFvQztBQWFwQzs7OztHQUlHO0FBQ0gsU0FBUyxRQUFRLENBQUMsQ0FBbUI7SUFDbkMsT0FBTztRQUNMLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNOLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNOLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNOLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNQLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsTUFBTSxDQUFDLENBQWdCO0lBQzlCLE9BQU87UUFDTCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDTixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDTixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDUCxDQUFDO0FBQ0osQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFTLFNBQVMsQ0FBQyxHQUFZO0lBQzdCLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFTLFdBQVcsQ0FBQyxHQUFlO0lBQ2xDLE9BQU8sSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBUyxzQkFBc0IsQ0FDN0IsU0FBcUIsRUFDckIsSUFBYSxFQUNiLEtBQWE7SUFFYixJQUFJLE9BQU8sR0FB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